package cryptography.asymmetric.gui;import static java.util.Map.entry;import com.intellij.uiDesigner.core.GridConstraints;import com.intellij.uiDesigner.core.GridLayoutManager;import com.intellij.uiDesigner.core.Spacer;import cryptography.asymmetric.Numbers;import cryptography.asymmetric.dh.DH;import cryptography.asymmetric.dh.DHKeys;import cryptography.asymmetric.dsa.DSA;import cryptography.asymmetric.dsa.DSAKeys;import cryptography.asymmetric.elgamal.ElGamal;import cryptography.asymmetric.elgamal.ElGamalKeys;import cryptography.asymmetric.elgamal.ElGamalSignature;import cryptography.asymmetric.md5.MD5;import cryptography.asymmetric.rsa.OAEP;import cryptography.asymmetric.rsa.RSA;import cryptography.asymmetric.rsa.RSAKeys;import cryptography.asymmetric.sha.SHA;import cryptography.asymmetric.shamir.Shamir;import cryptography.asymmetric.shamir.ShamirKeys;import java.awt.BorderLayout;import java.awt.CardLayout;import java.awt.Color;import java.awt.Container;import java.awt.Cursor;import java.awt.Desktop;import java.awt.Dimension;import java.awt.Font;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.IOException;import java.math.BigInteger;import java.net.URI;import java.net.URISyntaxException;import java.nio.file.Files;import java.nio.file.Path;import java.text.DecimalFormat;import java.util.Arrays;import java.util.HashMap;import java.util.Locale;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.DefaultListModel;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JProgressBar;import javax.swing.JRadioButton;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.SwingUtilities;import javax.swing.SwingWorker;import javax.swing.UIManager;import javax.swing.WindowConstants;import javax.swing.border.Border;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.plaf.FontUIResource;import javax.swing.plaf.basic.BasicScrollBarUI;import javax.swing.text.StyleContext;public class MainForm extends JFrame {  private static final DecimalFormat decimalFormat = new DecimalFormat("0.00");  private final JFileChooser inputFileChooser = new JFileChooser();  private final JFileChooser outputFileChooser = new JFileChooser();  private final Map<String, String> fullAlgorithmNames = Map.ofEntries(      entry("RSA", "Rivest-Shamir-Adleman encryption"),      entry("DH", "Diffie-Hellman key exchange"),      entry("Shamir", "Shamir No-key encryption"),      entry("ElGamal", "ElGamal encryption scheme"),      entry("MD5", "Message-digest 5"),      entry("SHA1", "Secure Hash Algorithm 1"),      entry("DSA", "Digital Signature Algorithm"),      entry("RSA sign", "Rivest-Shamir-Adleman digital signature"),      entry("ElGamal sign", "ElGamal digest signature")  );  //Перефразирование обычных, часто встречающихся исключений в что-то более понятное для пользоватлея  private final Map<String, String> defaultExceptionsRephrase = Map.ofEntries(      entry("Zero length BigInteger", "Not all required for current operation parameters are set")  );  private JPanel mainPanel;  private JLabel progNameLabel;  private JLabel authorLabel;  private JList<String> algorithmsList;  private JScrollPane scrollPanel;  private JPanel dataPanel;  private JPanel menuPanel;  private JPanel algNamePanel;  private JLabel algNameLabel;  private JPanel logsPanel;  private JPanel algorithmsPanel;  private JTextArea logsTextArea;  private JPanel inputTypePanel;  private JRadioButton plainTextRadioButton;  private JRadioButton fileRadioButton;  private JPanel outputResultPanel;  private JTextArea outputArea;  private JScrollPane scrollOutputPanel;  private JLabel outputTipLabel;  private JPanel inputDataAndParamsPanel;  private JPanel inputDataPanel;  private JTextArea inputArea;  private JButton calculateButton;  private JLabel inputTipLabel;  private JScrollPane scrollInputPanel;  private JPanel calculateButtonPanel;  private JRadioButton encryptRadioButton;  private JRadioButton decryptRadioButton;  private JPanel paramsPanel;  private JPanel encryptDecryptPanel;  private JLabel paramsTipLabel;  private JPanel changeInputTypePanel;  private JPanel inputFilePanel;  private JButton chooseInputFileButton;  private JLabel currentFileTipLabel;  private JLabel currentFilePathLabel;  private JLabel fileSizeTipLabel;  private JPanel changeOutputTypePanel;  private JPanel outputFilePanel;  private JButton chooseOutputFileButton;  private JLabel outputFileSizeTipLabel;  private JLabel outputCUrrentFilePathLabel;  private JTextField currentFilePathField;  private JTextField outputCurrentFilePathField;  private JPanel authorPanel;  private JLabel githubLink;  private JPanel linksPanel;  private JLabel githubLabel;  private JPanel paramsAlgorithmsPanel;  private JRadioButton rsaPKCS1OAEPPaddingButton;  private JRadioButton rsaNonePaddingButton;  private JRadioButton autoKeyGenButton;  private JRadioButton manualKeyGenButton;  private JTextField rsaModulusField;  private JLabel rsaPublicPrivateKey;  private JTextField rsaPublicKeyField;  private JPanel rsaEncryptDecryptPanel;  private JTextField rsaPrivateKeyField;  private JTextField rsaKeyLengthField;  private JButton generateKeyButton;  private JPanel rsaPaddingPanel;  private JTextField rsaPaddingSeedField;  private JTextField rsaPaddingLabelField;  private JPanel rsaPaddingOAEPPanel;  private JButton outputToInputButton;  private JPanel progressPanel;  private JProgressBar progressBar;  private JLabel progressLabel;  private JPanel outputToInputPanel;  private JPanel dhEncryptDecryptPanel;  private JPanel rsaPanel;  private JLabel rsaModulusLabel;  private JLabel rsaKeyLengthLabel;  private JLabel rsaPaddingLabelLabel;  private JLabel rsaPaddingSeedLabel;  private JPanel dhPanel;  private JTextField dhModulusField;  private JTextField dhBaseField;  private JPanel dhEncryptPanel;  private JLabel dhAliceKeyLabel;  private JTextField dhAliceField;  private JPanel dhDecryptPanel;  private JLabel dhBobKeyLabel;  private JTextField dhBobField;  private JPanel paramsInputTypePanel;  private JTextField dhSharedLength;  private JButton dhAliceButton;  private JButton dhBobButton;  private JButton dhGenerateSharedButton;  private JPanel shamirPanel;  private JTextField shamirModulusField;  private JTextField shamirModulusLengthField;  private JButton shamirGeneratePrivateKeysButton;  private JTextField shamirAlice1Field;  private JTextField shamirAlice2Field;  private JLabel shamirKeyLengthLabel;  private JPanel shamirEncryptDecryptPanel;  private JPanel shamirEncryptPanel;  private JPanel shamirDecryptPanel;  private JTextField shamirBob1Field;  private JTextField shamirBob2Field;  private JRadioButton shamirPartOneRadioButton;  private JRadioButton shamirPartTwoRadioButton;  private JLabel shamirAliceBob1Label;  private JLabel shamirAliceBob2Label;  private JButton shamirGeneratePublicButton;  private JPanel elGamalPanel;  private JButton elGamalGeneratePublicButton;  private JButton elGamalGeneratePersonalButton;  private JTextField elGamalSharedLengthField;  private JTextField elGamalModulusField;  private JTextField elGamalBaseField;  private JLabel elGamalModulusLabel;  private JPanel elGamalEncryptDecryptPanel;  private JTextField elGamalEncryptField;  private JTextField elGamalDecryptField;  private JLabel elGamalPublicKeyLabel;  private JRadioButton elGamalNonePaddingButton;  private JRadioButton elGamalPKCSPaddingButton;  private JLabel elGanalPaddingLabel;  private JPanel md5Panel;  private JPanel sha1Panel;  private JPanel dsaPanel;  private JButton dsaGenerateSharedButton;  private JRadioButton dsa1024160Button;  private JRadioButton dsa2048224Button;  private JRadioButton dsa2048256Button;  private JRadioButton dsa3072256Button;  private JTextField dsaModulusField;  private JTextField dsaOrderField;  private JTextField dsaBaseField;  private JLabel dsaPublicPrivateKeyLabel;  private JPanel dsaEncryptDecryptPanel;  private JTextField dsaPrivateKeyField;  private JTextField dsaPublicKeyField;  private JButton dsaGenerateKeyPair;  private JPanel dsaSignPanel;  private JPanel dsaVerifyPanel;  private JTextField dsaSignedPart1Field;  private JTextField dsaSignedPart2Field;  private JPanel rsaSignPanel;  private JButton rsaSignGenerateKeyPairButton;  private JTextField rsaSignKeyLengthField;  private JRadioButton rsaSignGeneratePublicRadioButton;  private JTextField rsaSignModulusField;  private JPanel rsaSignEncryptDecryptPanel;  private JTextField rsaSignPrivateKeyField;  private JTextField rsaSignPublicKeyField;  private JRadioButton rsaSignDefaultPublicRadioButton;  private JLabel rsaSignPublicPrivateKeyLabel;  private JTextField elGamalSignKeyLengthField;  private JTextField elGamalSignModulusField;  private JTextField elGamalSignBaseField;  private JPanel elGamalSignEncryptDecryptPanel;  private JPanel elGamalSignEncryptPanel;  private JPanel elGamalSignDecryptPanel;  private JPanel elGamalSignPanel;  private JButton elGamalSignGenerateSharedButton;  private JButton elGamalSignGenerateKeyPairButton;  private JTextField elGamalSignPrivateKeyField;  private JTextField elGamalSignPublicKeyField;  private JTextField elGamalSignResultField;  private JTextField elGamalSignRequiredOutputField;  private JTextField elGamalSignPart2Field;  private JTextArea currentInputFileArea;  private JLabel fileSizeLabel;  private JLabel currentFileLabel;  public MainForm() {    super();    setSize(new Dimension(890, 550));    setVisible(true);    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);    setContentPane(mainPanel);    scrollPanel.setPreferredSize(new Dimension(100, this.getHeight()));    progNameLabel.setPreferredSize(new Dimension(scrollPanel.getWidth(), 40));    authorPanel.setPreferredSize(new Dimension(scrollPanel.getWidth(), 40));    algNamePanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 40));    logsPanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 55));    inputTypePanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 40));    outputResultPanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 70));    inputDataPanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 100));    calculateButtonPanel.setPreferredSize(new Dimension(200, inputDataPanel.getHeight()));    progressPanel.setPreferredSize(new Dimension(200, inputDataPanel.getHeight()));    Dimension scrollDim = new Dimension(10, 0);    NoArrowScrollBarUI scrollArrow = new NoArrowScrollBarUI();    algorithmsList.setSelectedIndex(0);    scrollOutputPanel.getVerticalScrollBar().setPreferredSize(scrollDim);    scrollInputPanel.getVerticalScrollBar().setPreferredSize(scrollDim);    scrollPanel.getVerticalScrollBar().setPreferredSize(scrollDim);    githubLabel.setForeground(Color.BLUE.darker());    githubLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));    githubLabel.addMouseListener(new HyperLinkListener());    //scrollOutputPanel.getVerticalScrollBar().setUI(scrollArrow);    //scrollInputPanel.getVerticalScrollBar().setUI(scrollArrow);    //scrollPanel.getVerticalScrollBar().setUI(scrollArrow);    logsTextArea.setBackground(dataPanel.getBackground());    algorithmsList.setBackground(dataPanel.getBackground());    currentFilePathField.setBackground(dataPanel.getBackground());    outputCurrentFilePathField.setBackground(dataPanel.getBackground());    logsTextArea.setWrapStyleWord(true);    outputArea.setWrapStyleWord(true);    inputArea.setWrapStyleWord(true);    logsTextArea.setLineWrap(true);    outputArea.setLineWrap(true);    inputArea.setLineWrap(true);    logsTextArea.setMargin(new Insets(0, 10, 0, 10));    outputArea.setMargin(new Insets(5, 5, 5, 5));    inputArea.setMargin(new Insets(5, 5, 5, 5));    calculateButton.setMargin(new Insets(25, 25, 25, 25));    logsTextArea.getCaret().setBlinkRate(0);    InputTypeListener inputTypeListener = new InputTypeListener();    fileRadioButton.addItemListener(inputTypeListener);    plainTextRadioButton.addItemListener(inputTypeListener);    Border emptyBorder = BorderFactory.createEmptyBorder();    plainTextRadioButton.setBorder(emptyBorder);    fileRadioButton.setBorder(emptyBorder);    ChoseFileListener cfl = new ChoseFileListener();    chooseInputFileButton.addActionListener(cfl);    chooseOutputFileButton.addActionListener(cfl);    outputToInputButton.setText("<html><center>Move output<br>to input</center></html>");    outputToInputButton.setPreferredSize(new Dimension(75, outputResultPanel.getHeight()));    outputToInputButton.setMargin(new Insets(0, 0, 0, 0));    logsTextArea.setText(        "1.Choose input/output format -> enter data according to chosen format\n2.Choose encrypt or decrypt -> set parameters\n3.Press «Calculate» button");    scrollPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 2, 0, Color.BLACK));    menuPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 2, Color.BLACK));    algorithmsPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    encryptDecryptPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    outputTipLabel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    logsTextArea.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    paramsInputTypePanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 10));    outputResultPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    outputToInputPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 10));    outputResultPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));    paramsPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    paramsAlgorithmsPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));    progressPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 15));    logsPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));    inputFilePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    rsaPaddingOAEPPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 15));    currentFilePathField.setBorder(BorderFactory.createEmptyBorder());    outputCurrentFilePathField.setBorder(BorderFactory.createEmptyBorder());    outputFilePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    inputDataPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));    calculateButtonPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));    algNameLabel.setText(fullAlgorithmNames.get(algorithmsList.getSelectedValue()));    algorithmsList.addListSelectionListener(new MenuSelectionListener());    autoKeyGenButton.setSelected(true);    UserSelections.currentAlgorithm = algorithmsList.getSelectedValue();    UserSelections.keyGenAutoOrManually = autoKeyGenButton.isSelected();    UserSelections.progress = progressBar;    Dimension rsaKeyLabel = new Dimension(50, 10);    //RSA    rsaNonePaddingButton.setSelected(true);    rsaPublicPrivateKey.setMinimumSize(rsaKeyLabel);    rsaPublicPrivateKey.setMaximumSize(rsaKeyLabel);    rsaPublicPrivateKey.setPreferredSize(rsaKeyLabel);    rsaPublicKeyField.setEditable(!UserSelections.keyGenAutoOrManually);    rsaPrivateKeyField.setEditable(!UserSelections.keyGenAutoOrManually);    rsaModulusField.setEditable(!UserSelections.keyGenAutoOrManually);    rsaKeyLengthField.setEditable(UserSelections.keyGenAutoOrManually);    generateKeyButton.setEnabled(UserSelections.keyGenAutoOrManually);    RSAPaddingListener rsaPaddingListener = new RSAPaddingListener();    rsaNonePaddingButton.addItemListener(rsaPaddingListener);    rsaPKCS1OAEPPaddingButton.addItemListener(rsaPaddingListener);    //DH    DHGenerateAliceBobListener aliceBobListener = new DHGenerateAliceBobListener();    dhBobButton.addActionListener(aliceBobListener);    dhAliceButton.addActionListener(aliceBobListener);    dhGenerateSharedButton.addActionListener(new DHGenerateSharedListener());    //Shamir    shamirPartOneRadioButton.setSelected(true);    shamirGeneratePublicButton.addActionListener(new ShamirGeneratePublicListener());    shamirGeneratePrivateKeysButton.addActionListener(new ShamirGeneratePrivateListener());    //ElGamal    elGamalNonePaddingButton.setSelected(true);    elGamalGeneratePublicButton.addActionListener(new ElGamalGenerateSharedListener());    elGamalGeneratePersonalButton.addActionListener(new ElGamalGeneratePersonalListener());    //DSA    dsaGenerateSharedButton.addActionListener(new DSAGenerateSharedListener());    dsaGenerateKeyPair.addActionListener(new DSAGeneratePersonalListener());    //RSA sign    rsaSignGenerateKeyPairButton.addActionListener(new GenerateKeyListener());    //ElGamal sign    elGamalSignGenerateSharedButton.addActionListener(new ElGamalGenerateSharedListener());    elGamalSignGenerateKeyPairButton.addActionListener(new ElGamalGeneratePersonalListener());    EncryptDecryptListener encryptDecryptListener = new EncryptDecryptListener();    encryptRadioButton.addItemListener(encryptDecryptListener);    decryptRadioButton.addItemListener(encryptDecryptListener);    AutoManualKeyGenListener autoManualKeyGenListener = new AutoManualKeyGenListener();    autoKeyGenButton.addItemListener(autoManualKeyGenListener);    manualKeyGenButton.addItemListener(autoManualKeyGenListener);    GenerateKeyListener generateKeyListener = new GenerateKeyListener();    generateKeyButton.addActionListener(generateKeyListener);    calculateButton.addActionListener(new CalculateListener());    outputToInputButton.addActionListener(new OutputToInputListener());  }  public static void main(String[] args) {    try {      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());      UIManager.put("ToolTip.font", new Font("Dialog", Font.PLAIN, 10));    } catch (Exception e) {      e.printStackTrace();    }    SwingUtilities.invokeLater(MainForm::new);  }  /**   * Чтение введенных пользователем данных в зависимости от типа ввода (текст - файл)   *   * @return массив {@code byte[]} прочитанных данных пользователя   * @throws IOException          Проблемы при чтении из файла   * @throws NullPointerException Прочие проблемы с доступом к объектам   */  private byte[] readUserInput() throws IOException, NullPointerException {    return UserSelections.fileInput ? Files.readAllBytes(Path.of(UserSelections.inputFilePath))        : inputArea.getText().getBytes(UserSelections.charsetString);  }  /**   * Проверка на то, является ли файл доступным на чтение или нет   *   * @param strPath абсолютный путь файла   * @return true - файл можно редактировать, false - файл нельзя редактировать, файл не существует   * или иные ограничения доступа   */  private boolean writeable(String strPath) {    try {      Path path = Path.of(strPath);      if (Files.isWritable(path)) {        return true;      }    } catch (Exception exception) {      return false;    }    return false;  }  /**   * Запись   *   * @param data   * @throws IOException   * @throws NullPointerException   */  private void writeCalculatedOutput(byte[] data) throws IOException, NullPointerException {    if (UserSelections.fileOutput) {      Files.write(Path.of(UserSelections.outputFilePath), data);      outputFileSizeTipLabel.setText(          "Size (in bytes): " + Files.size(Path.of(UserSelections.outputFilePath)));    } else {      outputArea.setText(new String(data, UserSelections.charsetString));    }  }  private void changePlane() {    //Отличительные изменения, меняющие такие параметры структуры окна    specificAlgorithmChanges();    final Map<String, JPanel> algorithmEncryptDecryptPanels = Map.ofEntries(        entry("RSA", rsaEncryptDecryptPanel),        entry("DH", dhEncryptDecryptPanel),        entry("Shamir", shamirEncryptDecryptPanel),        entry("ElGamal", elGamalEncryptDecryptPanel),        entry("DSA", dsaEncryptDecryptPanel),        entry("RSA sign", rsaSignEncryptDecryptPanel),        entry("ElGamal sign", elGamalSignEncryptDecryptPanel)    );    //Смена панели параметров в зависимости от выбранного алгоритма    CardLayout cardLayout = (CardLayout) paramsAlgorithmsPanel.getLayout();    cardLayout.show(paramsAlgorithmsPanel, UserSelections.currentAlgorithm);    //Смена панели параметров в зависимости от выбранного режима (зашифровать или расшифровать) и алгоритма    Container panel = algorithmEncryptDecryptPanels.get(UserSelections.currentAlgorithm);    if (panel != null) {      cardLayout = (CardLayout) panel.getLayout();      cardLayout.show(panel, UserSelections.encryptOrDecrypt ? "Encrypt" : "Decrypt");    }    //Остальные изменения интерфейса, несвязанные с CardLayout    changeEncryptOrDecrypt();    changeAutoOrManually();    changePlainTextOrFile();  }  private void changePlainTextOrFile() {    String currentAlg = UserSelections.currentAlgorithm;    CardLayout cl = (CardLayout) changeOutputTypePanel.getLayout();    if (fileRadioButton.isSelected()) {      if (currentAlg.equals("SHA1") | currentAlg.equals("MD5")) {        cl.show(changeOutputTypePanel, "PlainText");        UserSelections.fileOutput = false;      } else {        cl.show(changeOutputTypePanel, "File");        UserSelections.fileOutput = true;      }    }  }  private void specificAlgorithmChanges() {    String selectedAlg = UserSelections.currentAlgorithm;    switch (selectedAlg) {      case "DH", "Shamir" -> {        encryptRadioButton.setText("Alice");        decryptRadioButton.setText("Bob");      }      case "DSA", "RSA sign", "ElGamal sign" -> {        encryptRadioButton.setText("Sign");        decryptRadioButton.setText("Verify");      }      default -> {        encryptRadioButton.setText("Encrypt");        decryptRadioButton.setText("Decrypt");      }    }    switch (selectedAlg) {      case "SHA1", "MD5" -> {        decryptRadioButton.setEnabled(false);        encryptRadioButton.setSelected(true);        UserSelections.encryptOrDecrypt = true;        paramsTipLabel.setVisible(false);        autoKeyGenButton.setVisible(false);        manualKeyGenButton.setVisible(false);      }      default -> {        decryptRadioButton.setEnabled(true);        paramsTipLabel.setVisible(true);        autoKeyGenButton.setVisible(true);        manualKeyGenButton.setVisible(true);      }    }  }  private void changeAutoOrManually() {    //true - автоматически, false - вручную    boolean ableToChange = UserSelections.keyGenAutoOrManually;    //Блокировка или разблокировка кнопок, текстовых полей и др. элементов параметров в зависимости от того, вводятся параметры вручную или автоматически    switch (UserSelections.currentAlgorithm) {      case "RSA" -> {        rsaModulusField.setEditable(!ableToChange);        rsaPublicKeyField.setEditable(!ableToChange);        rsaPrivateKeyField.setEditable(!ableToChange);        rsaKeyLengthField.setEditable(ableToChange);        generateKeyButton.setEnabled(ableToChange);      }      case "DH" -> {        dhAliceButton.setEnabled(ableToChange);        dhBobButton.setEnabled(ableToChange);        dhSharedLength.setEditable(ableToChange);        dhGenerateSharedButton.setEnabled(ableToChange);        dhModulusField.setEditable(!ableToChange);        dhBaseField.setEditable(!ableToChange);        dhBobField.setEditable(!ableToChange);        dhAliceField.setEditable(!ableToChange);      }      case "Shamir" -> {        shamirAlice1Field.setEditable(!ableToChange);        shamirAlice2Field.setEditable(!ableToChange);        shamirBob1Field.setEditable(!ableToChange);        shamirBob2Field.setEditable(!ableToChange);        shamirModulusField.setEditable(!ableToChange);        shamirModulusField.setEditable(!ableToChange);        shamirModulusLengthField.setEditable(ableToChange);        shamirGeneratePrivateKeysButton.setEnabled(ableToChange);        shamirGeneratePublicButton.setEnabled(ableToChange);      }      case "ElGamal" -> {        elGamalSharedLengthField.setEditable(ableToChange);        elGamalGeneratePersonalButton.setEnabled(ableToChange);        elGamalGeneratePublicButton.setEnabled(ableToChange);        elGamalBaseField.setEditable(!ableToChange);        elGamalModulusField.setEditable(!ableToChange);        elGamalEncryptField.setEditable(!ableToChange);        elGamalDecryptField.setEditable(!ableToChange);      }      case "DSA" -> {        dsaGenerateSharedButton.setEnabled(ableToChange);        dsaGenerateKeyPair.setEnabled(ableToChange);        dsaPrivateKeyField.setEditable(!ableToChange);        dsaPublicKeyField.setEditable(!ableToChange);        dsaModulusField.setEditable(!ableToChange);        dsaBaseField.setEditable(!ableToChange);        dsaOrderField.setEditable(!ableToChange);      }      case "RSA sign" -> {        rsaSignGenerateKeyPairButton.setEnabled(ableToChange);        rsaSignKeyLengthField.setEditable(ableToChange);        rsaSignModulusField.setEditable(!ableToChange);        rsaSignPublicKeyField.setEditable(!ableToChange);        rsaSignPrivateKeyField.setEditable(!ableToChange);      }      case "ElGamal sign" -> {        elGamalSignGenerateSharedButton.setEnabled(ableToChange);        elGamalSignGenerateKeyPairButton.setEnabled(ableToChange);        elGamalSignKeyLengthField.setEditable(ableToChange);        elGamalSignPublicKeyField.setEditable(!ableToChange);        elGamalSignPrivateKeyField.setEditable(!ableToChange);        elGamalSignModulusField.setEditable(!ableToChange);        elGamalSignBaseField.setEditable(!ableToChange);      }    }  }  private void changeEncryptOrDecrypt() {    switch (UserSelections.currentAlgorithm) {      case "RSA" -> {        rsaPublicPrivateKey.setText(UserSelections.encryptOrDecrypt ? "Public key" : "Private key");      }      case "Shamir" -> {        String operator = UserSelections.encryptOrDecrypt ? "Alice" : "Bob";        shamirAliceBob1Label.setText(operator + " private №1");        shamirAliceBob2Label.setText(operator + " private №2");        shamirGeneratePrivateKeysButton.setText("Generate " + operator + " keys");      }      case "ElGamal" -> {        String keyType = UserSelections.encryptOrDecrypt ? "Public" : "Private";        elGamalPublicKeyLabel.setText(keyType + " key");      }      case "RSA sign" -> {        rsaSignPublicPrivateKeyLabel.setText(            UserSelections.encryptOrDecrypt ? "Private key" : "Public key  ");      }    }  }  private void exceptionLogger(Exception exception) {    logsTextArea.setText("");    String exceptionMessage;    do {      exceptionMessage = exception.getMessage();      //Перефразирование некоторых популярных исключений, таких как "Zero length BigInteger"      if (defaultExceptionsRephrase.containsKey(exceptionMessage)) {        exceptionMessage = defaultExceptionsRephrase.get(exceptionMessage);      }      logsTextArea.append(exceptionMessage);      exception = (Exception) exception.getCause();    } while (exception != null);  }  {// GUI initializer generated by IntelliJ IDEA GUI Designer// >>> IMPORTANT!! <<<// DO NOT EDIT OR ADD ANY CODE HERE!    $$$setupUI$$$();  }  /**   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR   * call it in your code!   *   * @noinspection ALL   */  private void $$$setupUI$$$() {    mainPanel = new JPanel();    mainPanel.setLayout(new BorderLayout(0, 0));    Font mainPanelFont = this.$$$getFont$$$(null, -1, 14, mainPanel.getFont());    if (mainPanelFont != null) {      mainPanel.setFont(mainPanelFont);    }    menuPanel = new JPanel();    menuPanel.setLayout(new BorderLayout(0, 0));    mainPanel.add(menuPanel, BorderLayout.WEST);    progNameLabel = new JLabel();    Font progNameLabelFont = this.$$$getFont$$$(null, -1, 16, progNameLabel.getFont());    if (progNameLabelFont != null) {      progNameLabel.setFont(progNameLabelFont);    }    progNameLabel.setText("ProgName");    menuPanel.add(progNameLabel, BorderLayout.NORTH);    scrollPanel = new JScrollPane();    scrollPanel.setVerticalScrollBarPolicy(20);    menuPanel.add(scrollPanel, BorderLayout.CENTER);    algorithmsList = new JList();    Font algorithmsListFont = this.$$$getFont$$$(null, -1, 14, algorithmsList.getFont());    if (algorithmsListFont != null) {      algorithmsList.setFont(algorithmsListFont);    }    final DefaultListModel defaultListModel1 = new DefaultListModel();    defaultListModel1.addElement("RSA");    defaultListModel1.addElement("DH");    defaultListModel1.addElement("Shamir");    defaultListModel1.addElement("ElGamal");    defaultListModel1.addElement("MD5");    defaultListModel1.addElement("SHA1");    defaultListModel1.addElement("DSA");    defaultListModel1.addElement("RSA sign");    defaultListModel1.addElement("ElGamal sign");    algorithmsList.setModel(defaultListModel1);    algorithmsList.setSelectedIndex(-1);    algorithmsList.setSelectionMode(0);    scrollPanel.setViewportView(algorithmsList);    authorPanel = new JPanel();    authorPanel.setLayout(new BorderLayout(0, 0));    menuPanel.add(authorPanel, BorderLayout.SOUTH);    authorLabel = new JLabel();    Font authorLabelFont = this.$$$getFont$$$(null, -1, 14, authorLabel.getFont());    if (authorLabelFont != null) {      authorLabel.setFont(authorLabelFont);    }    authorLabel.setText("Pavel Stepanov");    authorPanel.add(authorLabel, BorderLayout.NORTH);    linksPanel = new JPanel();    linksPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));    authorPanel.add(linksPanel, BorderLayout.CENTER);    githubLabel = new JLabel();    Font githubLabelFont = this.$$$getFont$$$(null, -1, 14, githubLabel.getFont());    if (githubLabelFont != null) {      githubLabel.setFont(githubLabelFont);    }    githubLabel.setHorizontalAlignment(2);    githubLabel.setText("GitHub");    linksPanel.add(githubLabel,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label1 = new JLabel();    label1.setText("");    linksPanel.add(label1,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label2 = new JLabel();    label2.setText("");    linksPanel.add(label2,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dataPanel = new JPanel();    dataPanel.setLayout(new BorderLayout(0, 0));    mainPanel.add(dataPanel, BorderLayout.CENTER);    algNamePanel = new JPanel();    algNamePanel.setLayout(new BorderLayout(0, 0));    dataPanel.add(algNamePanel, BorderLayout.NORTH);    algNameLabel = new JLabel();    Font algNameLabelFont = this.$$$getFont$$$(null, -1, 16, algNameLabel.getFont());    if (algNameLabelFont != null) {      algNameLabel.setFont(algNameLabelFont);    }    algNameLabel.setHorizontalAlignment(0);    algNameLabel.setHorizontalTextPosition(0);    algNameLabel.setText("Label");    algNamePanel.add(algNameLabel, BorderLayout.CENTER);    logsPanel = new JPanel();    logsPanel.setLayout(new BorderLayout(0, 0));    dataPanel.add(logsPanel, BorderLayout.SOUTH);    logsTextArea = new JTextArea();    logsTextArea.setEditable(false);    Font logsTextAreaFont = this.$$$getFont$$$(null, -1, 12, logsTextArea.getFont());    if (logsTextAreaFont != null) {      logsTextArea.setFont(logsTextAreaFont);    }    logsTextArea.setText("logs");    logsPanel.add(logsTextArea, BorderLayout.CENTER);    algorithmsPanel = new JPanel();    algorithmsPanel.setLayout(new BorderLayout(0, 0));    dataPanel.add(algorithmsPanel, BorderLayout.CENTER);    inputTypePanel = new JPanel();    inputTypePanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));    algorithmsPanel.add(inputTypePanel, BorderLayout.NORTH);    plainTextRadioButton = new JRadioButton();    Font plainTextRadioButtonFont = this.$$$getFont$$$(null, -1, 14,        plainTextRadioButton.getFont());    if (plainTextRadioButtonFont != null) {      plainTextRadioButton.setFont(plainTextRadioButtonFont);    }    plainTextRadioButton.setSelected(true);    plainTextRadioButton.setText("Plain text");    inputTypePanel.add(plainTextRadioButton,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    fileRadioButton = new JRadioButton();    Font fileRadioButtonFont = this.$$$getFont$$$(null, -1, 14, fileRadioButton.getFont());    if (fileRadioButtonFont != null) {      fileRadioButton.setFont(fileRadioButtonFont);    }    fileRadioButton.setText("File");    inputTypePanel.add(fileRadioButton,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    outputResultPanel = new JPanel();    outputResultPanel.setLayout(new BorderLayout(0, 0));    algorithmsPanel.add(outputResultPanel, BorderLayout.SOUTH);    outputTipLabel = new JLabel();    Font outputTipLabelFont = this.$$$getFont$$$(null, -1, 14, outputTipLabel.getFont());    if (outputTipLabelFont != null) {      outputTipLabel.setFont(outputTipLabelFont);    }    outputTipLabel.setText("Output:");    outputResultPanel.add(outputTipLabel, BorderLayout.NORTH);    changeOutputTypePanel = new JPanel();    changeOutputTypePanel.setLayout(new CardLayout(0, 0));    outputResultPanel.add(changeOutputTypePanel, BorderLayout.CENTER);    scrollOutputPanel = new JScrollPane();    changeOutputTypePanel.add(scrollOutputPanel, "PlainText");    outputArea = new JTextArea();    outputArea.setEditable(false);    Font outputAreaFont = this.$$$getFont$$$(null, -1, 14, outputArea.getFont());    if (outputAreaFont != null) {      outputArea.setFont(outputAreaFont);    }    outputArea.setText("Output text would be here!");    scrollOutputPanel.setViewportView(outputArea);    outputFilePanel = new JPanel();    outputFilePanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));    changeOutputTypePanel.add(outputFilePanel, "File");    chooseOutputFileButton = new JButton();    Font chooseOutputFileButtonFont = this.$$$getFont$$$(null, -1, 14,        chooseOutputFileButton.getFont());    if (chooseOutputFileButtonFont != null) {      chooseOutputFileButton.setFont(chooseOutputFileButtonFont);    }    chooseOutputFileButton.setText("Choose File");    outputFilePanel.add(chooseOutputFileButton,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    final Spacer spacer1 = new Spacer();    outputFilePanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null,        0, false));    final JLabel label3 = new JLabel();    label3.setHorizontalAlignment(0);    label3.setText("Chosen absolute file path:");    outputFilePanel.add(label3,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    outputFileSizeTipLabel = new JLabel();    Font outputFileSizeTipLabelFont = this.$$$getFont$$$(null, -1, 14,        outputFileSizeTipLabel.getFont());    if (outputFileSizeTipLabelFont != null) {      outputFileSizeTipLabel.setFont(outputFileSizeTipLabelFont);    }    outputFileSizeTipLabel.setText("");    outputFilePanel.add(outputFileSizeTipLabel,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    outputCurrentFilePathField = new JTextField();    outputCurrentFilePathField.setEditable(false);    Font outputCurrentFilePathFieldFont = this.$$$getFont$$$(null, -1, 10,        outputCurrentFilePathField.getFont());    if (outputCurrentFilePathFieldFont != null) {      outputCurrentFilePathField.setFont(outputCurrentFilePathFieldFont);    }    outputCurrentFilePathField.setText("File not chosen!");    outputFilePanel.add(outputCurrentFilePathField,        new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    progressPanel = new JPanel();    progressPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));    progressPanel.setPreferredSize(new Dimension(150, 20));    outputResultPanel.add(progressPanel, BorderLayout.EAST);    progressBar = new JProgressBar();    progressBar.setStringPainted(true);    progressPanel.add(progressBar,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    progressLabel = new JLabel();    progressLabel.setText("Progress");    progressPanel.add(progressLabel,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    outputToInputPanel = new JPanel();    outputToInputPanel.setLayout(new BorderLayout(0, 0));    outputResultPanel.add(outputToInputPanel, BorderLayout.WEST);    outputToInputButton = new JButton();    Font outputToInputButtonFont = this.$$$getFont$$$(null, -1, 12, outputToInputButton.getFont());    if (outputToInputButtonFont != null) {      outputToInputButton.setFont(outputToInputButtonFont);    }    outputToInputButton.setHorizontalTextPosition(0);    outputToInputButton.setText("Move");    outputToInputPanel.add(outputToInputButton, BorderLayout.CENTER);    inputDataAndParamsPanel = new JPanel();    inputDataAndParamsPanel.setLayout(new BorderLayout(0, 0));    algorithmsPanel.add(inputDataAndParamsPanel, BorderLayout.CENTER);    inputDataPanel = new JPanel();    inputDataPanel.setLayout(new BorderLayout(0, 0));    inputDataAndParamsPanel.add(inputDataPanel, BorderLayout.NORTH);    inputTipLabel = new JLabel();    Font inputTipLabelFont = this.$$$getFont$$$(null, -1, 14, inputTipLabel.getFont());    if (inputTipLabelFont != null) {      inputTipLabel.setFont(inputTipLabelFont);    }    inputTipLabel.setText("Input:");    inputDataPanel.add(inputTipLabel, BorderLayout.NORTH);    calculateButtonPanel = new JPanel();    calculateButtonPanel.setLayout(new BorderLayout(0, 0));    calculateButtonPanel.setPreferredSize(new Dimension(150, 30));    inputDataPanel.add(calculateButtonPanel, BorderLayout.EAST);    calculateButton = new JButton();    Font calculateButtonFont = this.$$$getFont$$$(null, -1, 14, calculateButton.getFont());    if (calculateButtonFont != null) {      calculateButton.setFont(calculateButtonFont);    }    calculateButton.setText("Calculate");    calculateButtonPanel.add(calculateButton, BorderLayout.CENTER);    encryptDecryptPanel = new JPanel();    encryptDecryptPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));    inputDataPanel.add(encryptDecryptPanel, BorderLayout.SOUTH);    encryptRadioButton = new JRadioButton();    Font encryptRadioButtonFont = this.$$$getFont$$$(null, -1, 14, encryptRadioButton.getFont());    if (encryptRadioButtonFont != null) {      encryptRadioButton.setFont(encryptRadioButtonFont);    }    encryptRadioButton.setSelected(true);    encryptRadioButton.setText("Encrypt");    encryptDecryptPanel.add(encryptRadioButton,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    decryptRadioButton = new JRadioButton();    Font decryptRadioButtonFont = this.$$$getFont$$$(null, -1, 14, decryptRadioButton.getFont());    if (decryptRadioButtonFont != null) {      decryptRadioButton.setFont(decryptRadioButtonFont);    }    decryptRadioButton.setText("Decrypt");    encryptDecryptPanel.add(decryptRadioButton,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    changeInputTypePanel = new JPanel();    changeInputTypePanel.setLayout(new CardLayout(0, 0));    inputDataPanel.add(changeInputTypePanel, BorderLayout.CENTER);    scrollInputPanel = new JScrollPane();    changeInputTypePanel.add(scrollInputPanel, "Card1");    inputArea = new JTextArea();    Font inputAreaFont = this.$$$getFont$$$(null, -1, 14, inputArea.getFont());    if (inputAreaFont != null) {      inputArea.setFont(inputAreaFont);    }    scrollInputPanel.setViewportView(inputArea);    inputFilePanel = new JPanel();    inputFilePanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));    changeInputTypePanel.add(inputFilePanel, "Card2");    chooseInputFileButton = new JButton();    chooseInputFileButton.setActionCommand("InputFile");    Font chooseInputFileButtonFont = this.$$$getFont$$$(null, -1, 14,        chooseInputFileButton.getFont());    if (chooseInputFileButtonFont != null) {      chooseInputFileButton.setFont(chooseInputFileButtonFont);    }    chooseInputFileButton.setText("Choose File");    inputFilePanel.add(chooseInputFileButton,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    final Spacer spacer2 = new Spacer();    inputFilePanel.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null,        0, false));    fileSizeTipLabel = new JLabel();    Font fileSizeTipLabelFont = this.$$$getFont$$$(null, -1, 14, fileSizeTipLabel.getFont());    if (fileSizeTipLabelFont != null) {      fileSizeTipLabel.setFont(fileSizeTipLabelFont);    }    fileSizeTipLabel.setText("");    inputFilePanel.add(fileSizeTipLabel,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    currentFileTipLabel = new JLabel();    currentFileTipLabel.setText("Chosen absolute file path: ");    inputFilePanel.add(currentFileTipLabel,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    currentFilePathField = new JTextField();    currentFilePathField.setBackground(new Color(-12828863));    currentFilePathField.setEditable(false);    Font currentFilePathFieldFont = this.$$$getFont$$$(null, -1, 10,        currentFilePathField.getFont());    if (currentFilePathFieldFont != null) {      currentFilePathField.setFont(currentFilePathFieldFont);    }    currentFilePathField.setText("File not chosen!");    inputFilePanel.add(currentFilePathField,        new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    paramsPanel = new JPanel();    paramsPanel.setLayout(new BorderLayout(0, 0));    paramsPanel.setInheritsPopupMenu(false);    inputDataAndParamsPanel.add(paramsPanel, BorderLayout.CENTER);    paramsTipLabel = new JLabel();    Font paramsTipLabelFont = this.$$$getFont$$$(null, -1, 14, paramsTipLabel.getFont());    if (paramsTipLabelFont != null) {      paramsTipLabel.setFont(paramsTipLabelFont);    }    paramsTipLabel.setText("Parameters:");    paramsPanel.add(paramsTipLabel, BorderLayout.NORTH);    paramsInputTypePanel = new JPanel();    paramsInputTypePanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 20), -1, -1));    paramsPanel.add(paramsInputTypePanel, BorderLayout.WEST);    autoKeyGenButton = new JRadioButton();    autoKeyGenButton.setText("Auto");    paramsInputTypePanel.add(autoKeyGenButton,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    manualKeyGenButton = new JRadioButton();    manualKeyGenButton.setText("Manually");    paramsInputTypePanel.add(manualKeyGenButton,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    paramsAlgorithmsPanel = new JPanel();    paramsAlgorithmsPanel.setLayout(new CardLayout(0, 0));    paramsPanel.add(paramsAlgorithmsPanel, BorderLayout.CENTER);    rsaPanel = new JPanel();    rsaPanel.setLayout(new GridLayoutManager(3, 6, new Insets(0, 0, 0, 0), -1, -1));    paramsAlgorithmsPanel.add(rsaPanel, "RSA");    rsaPKCS1OAEPPaddingButton = new JRadioButton();    rsaPKCS1OAEPPaddingButton.setText("PKCS#1-OAEP");    rsaPanel.add(rsaPKCS1OAEPPaddingButton,        new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    rsaNonePaddingButton = new JRadioButton();    rsaNonePaddingButton.setText("None");    rsaPanel.add(rsaNonePaddingButton,        new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    rsaModulusField = new JTextField();    rsaPanel.add(rsaModulusField, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    rsaModulusLabel = new JLabel();    rsaModulusLabel.setText("Modulus");    rsaPanel.add(rsaModulusLabel,        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    rsaPublicPrivateKey = new JLabel();    rsaPublicPrivateKey.setText("Public key");    rsaPanel.add(rsaPublicPrivateKey,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    rsaEncryptDecryptPanel = new JPanel();    rsaEncryptDecryptPanel.setLayout(new CardLayout(0, 0));    rsaPanel.add(rsaEncryptDecryptPanel,        new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    rsaPublicKeyField = new JTextField();    rsaEncryptDecryptPanel.add(rsaPublicKeyField, "Encrypt");    rsaPrivateKeyField = new JTextField();    rsaEncryptDecryptPanel.add(rsaPrivateKeyField, "Decrypt");    rsaKeyLengthField = new JTextField();    rsaPanel.add(rsaKeyLengthField, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    rsaKeyLengthLabel = new JLabel();    rsaKeyLengthLabel.setText("Key length (bits)");    rsaPanel.add(rsaKeyLengthLabel,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    generateKeyButton = new JButton();    generateKeyButton.setText("Generate key pair");    rsaPanel.add(generateKeyButton,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    rsaPaddingPanel = new JPanel();    rsaPaddingPanel.setLayout(new CardLayout(0, 0));    rsaPanel.add(rsaPaddingPanel,        new GridConstraints(2, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    final JPanel panel1 = new JPanel();    panel1.setLayout(new BorderLayout(0, 0));    rsaPaddingPanel.add(panel1, "None");    rsaPaddingOAEPPanel = new JPanel();    rsaPaddingOAEPPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));    rsaPaddingPanel.add(rsaPaddingOAEPPanel, "PKCS#1-OAEP");    rsaPaddingLabelField = new JTextField();    rsaPaddingOAEPPanel.add(rsaPaddingLabelField,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    rsaPaddingSeedField = new JTextField();    rsaPaddingOAEPPanel.add(rsaPaddingSeedField,        new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    rsaPaddingLabelLabel = new JLabel();    rsaPaddingLabelLabel.setText("Label");    rsaPaddingOAEPPanel.add(rsaPaddingLabelLabel,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    rsaPaddingSeedLabel = new JLabel();    rsaPaddingSeedLabel.setText("Seed");    rsaPaddingOAEPPanel.add(rsaPaddingSeedLabel,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label4 = new JLabel();    label4.setText("Padding:");    rsaPanel.add(label4,        new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dhPanel = new JPanel();    dhPanel.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));    paramsAlgorithmsPanel.add(dhPanel, "DH");    final JLabel label5 = new JLabel();    label5.setText("Public modulus");    dhPanel.add(label5,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label6 = new JLabel();    label6.setText("Public base");    dhPanel.add(label6,        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dhModulusField = new JTextField();    dhModulusField.setHorizontalAlignment(10);    dhPanel.add(dhModulusField, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    dhEncryptDecryptPanel = new JPanel();    dhEncryptDecryptPanel.setLayout(new CardLayout(0, 0));    dhPanel.add(dhEncryptDecryptPanel,        new GridConstraints(3, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    dhEncryptPanel = new JPanel();    dhEncryptPanel.setLayout(new GridLayoutManager(2, 6, new Insets(0, 0, 0, 0), -1, -1));    dhEncryptDecryptPanel.add(dhEncryptPanel, "Encrypt");    dhAliceKeyLabel = new JLabel();    dhAliceKeyLabel.setText("Private Alice key");    dhEncryptPanel.add(dhAliceKeyLabel,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dhAliceField = new JTextField();    dhAliceField.setHorizontalAlignment(10);    dhEncryptPanel.add(dhAliceField, new GridConstraints(1, 1, 1, 5, GridConstraints.ANCHOR_CENTER,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    dhAliceButton = new JButton();    dhAliceButton.setText("Generate Alice key");    dhEncryptPanel.add(dhAliceButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,        GridConstraints.FILL_HORIZONTAL,        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dhDecryptPanel = new JPanel();    dhDecryptPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));    dhEncryptDecryptPanel.add(dhDecryptPanel, "Decrypt");    dhBobKeyLabel = new JLabel();    dhBobKeyLabel.setText("Private Bob key");    dhDecryptPanel.add(dhBobKeyLabel,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dhBobButton = new JButton();    dhBobButton.setText("Generate Bob key");    dhDecryptPanel.add(dhBobButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,        GridConstraints.FILL_HORIZONTAL,        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dhBobField = new JTextField();    dhDecryptPanel.add(dhBobField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    dhBaseField = new JTextField();    dhPanel.add(dhBaseField, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label7 = new JLabel();    label7.setText("Cyclic group order (key) (bits)");    dhPanel.add(label7,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dhSharedLength = new JTextField();    dhPanel.add(dhSharedLength, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));    dhGenerateSharedButton = new JButton();    dhGenerateSharedButton.setText("Generate shared data");    dhPanel.add(dhGenerateSharedButton,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    shamirPanel = new JPanel();    shamirPanel.setLayout(new GridLayoutManager(5, 5, new Insets(0, 0, 0, 0), -1, -1));    paramsAlgorithmsPanel.add(shamirPanel, "Shamir");    final JLabel label8 = new JLabel();    label8.setText("Public key (modulus)");    shamirPanel.add(label8,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    shamirModulusField = new JTextField();    shamirPanel.add(shamirModulusField, new GridConstraints(1, 1, 1, 4, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    shamirKeyLengthLabel = new JLabel();    shamirKeyLengthLabel.setText("Key length (bits)");    shamirPanel.add(shamirKeyLengthLabel,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    shamirGeneratePrivateKeysButton = new JButton();    shamirGeneratePrivateKeysButton.setText("Generate Alice keys");    shamirPanel.add(shamirGeneratePrivateKeysButton,        new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    shamirGeneratePublicButton = new JButton();    shamirGeneratePublicButton.setText("Generate public key");    shamirPanel.add(shamirGeneratePublicButton,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    shamirAliceBob1Label = new JLabel();    shamirAliceBob1Label.setText("Alice private №1");    shamirPanel.add(shamirAliceBob1Label,        new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    shamirAliceBob2Label = new JLabel();    shamirAliceBob2Label.setText("Alice private №2");    shamirPanel.add(shamirAliceBob2Label,        new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    shamirEncryptDecryptPanel = new JPanel();    shamirEncryptDecryptPanel.setLayout(new CardLayout(0, 0));    shamirPanel.add(shamirEncryptDecryptPanel,        new GridConstraints(3, 1, 2, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    shamirEncryptPanel = new JPanel();    shamirEncryptPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));    shamirEncryptDecryptPanel.add(shamirEncryptPanel, "Encrypt");    shamirAlice1Field = new JTextField();    shamirEncryptPanel.add(shamirAlice1Field,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    shamirAlice2Field = new JTextField();    shamirEncryptPanel.add(shamirAlice2Field,        new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    shamirDecryptPanel = new JPanel();    shamirDecryptPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));    shamirEncryptDecryptPanel.add(shamirDecryptPanel, "Decrypt");    shamirBob1Field = new JTextField();    shamirDecryptPanel.add(shamirBob1Field,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    shamirBob2Field = new JTextField();    shamirDecryptPanel.add(shamirBob2Field,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    shamirPartOneRadioButton = new JRadioButton();    shamirPartOneRadioButton.setText("Use first key");    shamirPanel.add(shamirPartOneRadioButton,        new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    shamirPartTwoRadioButton = new JRadioButton();    shamirPartTwoRadioButton.setText("Use second key");    shamirPanel.add(shamirPartTwoRadioButton,        new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    shamirModulusLengthField = new JTextField();    shamirPanel.add(shamirModulusLengthField,        new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    elGamalPanel = new JPanel();    elGamalPanel.setLayout(new GridLayoutManager(5, 5, new Insets(0, 0, 0, 0), -1, -1));    paramsAlgorithmsPanel.add(elGamalPanel, "ElGamal");    elGamalGeneratePublicButton = new JButton();    elGamalGeneratePublicButton.setText("Generate shared data");    elGamalPanel.add(elGamalGeneratePublicButton,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    elGamalModulusLabel = new JLabel();    elGamalModulusLabel.setText("Public modulus");    elGamalPanel.add(elGamalModulusLabel,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalPublicKeyLabel = new JLabel();    elGamalPublicKeyLabel.setText("Public key");    elGamalPanel.add(elGamalPublicKeyLabel,        new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label9 = new JLabel();    label9.setText("Public base");    elGamalPanel.add(label9,        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalGeneratePersonalButton = new JButton();    elGamalGeneratePersonalButton.setText("Generate key pair");    elGamalPanel.add(elGamalGeneratePersonalButton,        new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    elGamalSharedLengthField = new JTextField();    elGamalPanel.add(elGamalSharedLengthField,        new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label10 = new JLabel();    label10.setText("Cyclic group order (key) (bits)");    elGamalPanel.add(label10,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalModulusField = new JTextField();    elGamalPanel.add(elGamalModulusField,        new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    elGamalEncryptDecryptPanel = new JPanel();    elGamalEncryptDecryptPanel.setLayout(new CardLayout(0, 0));    elGamalPanel.add(elGamalEncryptDecryptPanel,        new GridConstraints(4, 1, 1, 3, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    elGamalEncryptField = new JTextField();    elGamalEncryptDecryptPanel.add(elGamalEncryptField, "Encrypt");    elGamalDecryptField = new JTextField();    elGamalEncryptDecryptPanel.add(elGamalDecryptField, "Decrypt");    elGamalBaseField = new JTextField();    elGamalPanel.add(elGamalBaseField, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JPanel panel2 = new JPanel();    panel2.setLayout(new GridLayoutManager(3, 1, new Insets(0, 15, 0, 0), -1, -1));    elGamalPanel.add(panel2,        new GridConstraints(0, 4, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    elGamalNonePaddingButton = new JRadioButton();    elGamalNonePaddingButton.setSelected(true);    elGamalNonePaddingButton.setText("None");    panel2.add(elGamalNonePaddingButton,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    elGamalPKCSPaddingButton = new JRadioButton();    elGamalPKCSPaddingButton.setText("PKCS#1-OAEP");    panel2.add(elGamalPKCSPaddingButton,        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    elGanalPaddingLabel = new JLabel();    elGanalPaddingLabel.setText("Padding");    panel2.add(elGanalPaddingLabel,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    md5Panel = new JPanel();    md5Panel.setLayout(new BorderLayout(0, 0));    paramsAlgorithmsPanel.add(md5Panel, "MD5");    sha1Panel = new JPanel();    sha1Panel.setLayout(new BorderLayout(0, 0));    paramsAlgorithmsPanel.add(sha1Panel, "SHA1");    dsaPanel = new JPanel();    dsaPanel.setLayout(new GridLayoutManager(6, 7, new Insets(0, 0, 0, 0), -1, -1));    paramsAlgorithmsPanel.add(dsaPanel, "DSA");    dsaGenerateSharedButton = new JButton();    dsaGenerateSharedButton.setText("Generate shared data");    dsaPanel.add(dsaGenerateSharedButton,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dsa1024160Button = new JRadioButton();    dsa1024160Button.setSelected(true);    dsa1024160Button.setText("1024:160");    dsaPanel.add(dsa1024160Button,        new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dsa2048224Button = new JRadioButton();    dsa2048224Button.setText("2048:224");    dsaPanel.add(dsa2048224Button,        new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dsa2048256Button = new JRadioButton();    dsa2048256Button.setText("2048:256");    dsaPanel.add(dsa2048256Button,        new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dsa3072256Button = new JRadioButton();    dsa3072256Button.setText("3072:256");    dsaPanel.add(dsa3072256Button,        new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dsaModulusField = new JTextField();    dsaPanel.add(dsaModulusField, new GridConstraints(1, 1, 1, 6, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    dsaOrderField = new JTextField();    dsaPanel.add(dsaOrderField, new GridConstraints(2, 1, 1, 6, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    dsaBaseField = new JTextField();    dsaPanel.add(dsaBaseField, new GridConstraints(3, 1, 1, 6, GridConstraints.ANCHOR_WEST,        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label11 = new JLabel();    label11.setText("Select cyclic group params (bits)");    dsaPanel.add(label11,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label12 = new JLabel();    label12.setText("Modulus");    dsaPanel.add(label12,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label13 = new JLabel();    label13.setText("Order");    dsaPanel.add(label13,        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label14 = new JLabel();    label14.setText("Base/Generator");    dsaPanel.add(label14,        new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dsaGenerateKeyPair = new JButton();    dsaGenerateKeyPair.setText("Generate key pair");    dsaPanel.add(dsaGenerateKeyPair, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER,        GridConstraints.FILL_HORIZONTAL,        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    dsaEncryptDecryptPanel = new JPanel();    dsaEncryptDecryptPanel.setLayout(new CardLayout(0, 0));    dsaPanel.add(dsaEncryptDecryptPanel,        new GridConstraints(5, 0, 1, 7, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    dsaSignPanel = new JPanel();    dsaSignPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));    dsaEncryptDecryptPanel.add(dsaSignPanel, "Encrypt");    final JLabel label15 = new JLabel();    label15.setText("Private key");    dsaSignPanel.add(label15,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dsaPrivateKeyField = new JTextField();    dsaSignPanel.add(dsaPrivateKeyField,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    dsaVerifyPanel = new JPanel();    dsaVerifyPanel.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));    dsaEncryptDecryptPanel.add(dsaVerifyPanel, "Decrypt");    final JLabel label16 = new JLabel();    label16.setText("Public key");    dsaVerifyPanel.add(label16,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dsaPublicKeyField = new JTextField();    dsaVerifyPanel.add(dsaPublicKeyField,        new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label17 = new JLabel();    label17.setText("Signed digest part №1");    dsaVerifyPanel.add(label17,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    dsaSignedPart1Field = new JTextField();    dsaVerifyPanel.add(dsaSignedPart1Field,        new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    dsaSignedPart2Field = new JTextField();    dsaVerifyPanel.add(dsaSignedPart2Field,        new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label18 = new JLabel();    label18.setText("Signed digest part №2");    dsaVerifyPanel.add(label18,        new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    rsaSignPanel = new JPanel();    rsaSignPanel.setLayout(new GridLayoutManager(4, 5, new Insets(0, 0, 0, 0), -1, -1));    paramsAlgorithmsPanel.add(rsaSignPanel, "RSA sign");    final JLabel label19 = new JLabel();    label19.setText("Key length (bits)");    rsaSignPanel.add(label19,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    rsaSignKeyLengthField = new JTextField();    rsaSignPanel.add(rsaSignKeyLengthField,        new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    rsaSignGenerateKeyPairButton = new JButton();    rsaSignGenerateKeyPairButton.setText("Generate key pair");    rsaSignPanel.add(rsaSignGenerateKeyPairButton,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    rsaSignGeneratePublicRadioButton = new JRadioButton();    rsaSignGeneratePublicRadioButton.setText("Random public");    rsaSignPanel.add(rsaSignGeneratePublicRadioButton,        new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    final JLabel label20 = new JLabel();    label20.setText("Modulus");    rsaSignPanel.add(label20,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    rsaSignPublicPrivateKeyLabel = new JLabel();    rsaSignPublicPrivateKeyLabel.setText("Private key");    rsaSignPanel.add(rsaSignPublicPrivateKeyLabel,        new GridConstraints(2, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    rsaSignModulusField = new JTextField();    rsaSignPanel.add(rsaSignModulusField,        new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    rsaSignEncryptDecryptPanel = new JPanel();    rsaSignEncryptDecryptPanel.setLayout(new CardLayout(0, 0));    rsaSignPanel.add(rsaSignEncryptDecryptPanel,        new GridConstraints(2, 1, 2, 3, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    rsaSignPrivateKeyField = new JTextField();    rsaSignEncryptDecryptPanel.add(rsaSignPrivateKeyField, "Encrypt");    rsaSignPublicKeyField = new JTextField();    rsaSignEncryptDecryptPanel.add(rsaSignPublicKeyField, "Decrypt");    rsaSignDefaultPublicRadioButton = new JRadioButton();    rsaSignDefaultPublicRadioButton.setSelected(true);    rsaSignDefaultPublicRadioButton.setText("Default public");    rsaSignPanel.add(rsaSignDefaultPublicRadioButton,        new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    elGamalSignPanel = new JPanel();    elGamalSignPanel.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));    paramsAlgorithmsPanel.add(elGamalSignPanel, "ElGamal sign");    elGamalSignGenerateSharedButton = new JButton();    elGamalSignGenerateSharedButton.setText("Generate shared data");    elGamalSignPanel.add(elGamalSignGenerateSharedButton,        new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    final JLabel label21 = new JLabel();    label21.setText("Select cyclic group params (bits)");    elGamalSignPanel.add(label21,        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalSignKeyLengthField = new JTextField();    elGamalSignPanel.add(elGamalSignKeyLengthField,        new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    elGamalSignModulusField = new JTextField();    elGamalSignPanel.add(elGamalSignModulusField,        new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    elGamalSignBaseField = new JTextField();    elGamalSignPanel.add(elGamalSignBaseField,        new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label22 = new JLabel();    label22.setText("Modulus");    elGamalSignPanel.add(label22,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    final JLabel label23 = new JLabel();    label23.setText("Base/Generator");    elGamalSignPanel.add(label23,        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalSignEncryptDecryptPanel = new JPanel();    elGamalSignEncryptDecryptPanel.setLayout(new CardLayout(0, 0));    elGamalSignPanel.add(elGamalSignEncryptDecryptPanel,        new GridConstraints(4, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,            null, 0, false));    elGamalSignEncryptPanel = new JPanel();    elGamalSignEncryptPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));    elGamalSignEncryptDecryptPanel.add(elGamalSignEncryptPanel, "Encrypt");    final JLabel label24 = new JLabel();    label24.setText("Private key");    elGamalSignEncryptPanel.add(label24,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalSignPrivateKeyField = new JTextField();    elGamalSignEncryptPanel.add(elGamalSignPrivateKeyField,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    elGamalSignDecryptPanel = new JPanel();    elGamalSignDecryptPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));    elGamalSignEncryptDecryptPanel.add(elGamalSignDecryptPanel, "Decrypt");    final JLabel label25 = new JLabel();    label25.setText("Public key");    elGamalSignDecryptPanel.add(label25,        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalSignPublicKeyField = new JTextField();    elGamalSignDecryptPanel.add(elGamalSignPublicKeyField,        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label26 = new JLabel();    label26.setText("Signed digest");    elGamalSignDecryptPanel.add(label26,        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalSignResultField = new JTextField();    elGamalSignDecryptPanel.add(elGamalSignResultField,        new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    final JLabel label27 = new JLabel();    label27.setText("Required verification output");    elGamalSignDecryptPanel.add(label27,        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,            false));    elGamalSignRequiredOutputField = new JTextField();    elGamalSignDecryptPanel.add(elGamalSignRequiredOutputField,        new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST,            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));    elGamalSignGenerateKeyPairButton = new JButton();    elGamalSignGenerateKeyPairButton.setText("Generate key pair");    elGamalSignPanel.add(elGamalSignGenerateKeyPairButton,        new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER,            GridConstraints.FILL_HORIZONTAL,            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));    ButtonGroup buttonGroup;    buttonGroup = new ButtonGroup();    buttonGroup.add(plainTextRadioButton);    buttonGroup.add(fileRadioButton);    buttonGroup = new ButtonGroup();    buttonGroup.add(encryptRadioButton);    buttonGroup.add(decryptRadioButton);    buttonGroup = new ButtonGroup();    buttonGroup.add(autoKeyGenButton);    buttonGroup.add(manualKeyGenButton);    buttonGroup = new ButtonGroup();    buttonGroup.add(rsaNonePaddingButton);    buttonGroup.add(rsaPKCS1OAEPPaddingButton);    buttonGroup = new ButtonGroup();    buttonGroup.add(shamirPartOneRadioButton);    buttonGroup.add(shamirPartTwoRadioButton);    buttonGroup = new ButtonGroup();    buttonGroup.add(elGamalPKCSPaddingButton);    buttonGroup.add(elGamalNonePaddingButton);    buttonGroup = new ButtonGroup();    buttonGroup.add(dsa2048224Button);    buttonGroup.add(dsa2048256Button);    buttonGroup.add(dsa3072256Button);    buttonGroup.add(dsa1024160Button);    buttonGroup = new ButtonGroup();    buttonGroup.add(rsaSignDefaultPublicRadioButton);    buttonGroup.add(rsaSignGeneratePublicRadioButton);  }  /**   * @noinspection ALL   */  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {    if (currentFont == null) {      return null;    }    String resultName;    if (fontName == null) {      resultName = currentFont.getName();    } else {      Font testFont = new Font(fontName, Font.PLAIN, 10);      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {        resultName = fontName;      } else {        resultName = currentFont.getName();      }    }    Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(),        size >= 0 ? size : currentFont.getSize());    boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");    Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize())        : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());    return fontWithFallback instanceof FontUIResource ? fontWithFallback        : new FontUIResource(fontWithFallback);  }  /**   * @noinspection ALL   */  public JComponent $$$getRootComponent$$$() {    return mainPanel;  }  static class NoArrowScrollBarUI extends BasicScrollBarUI {    protected JButton createZeroButton() {      JButton button = new JButton("zero button");      Dimension zeroDim = new Dimension(0, 0);      button.setPreferredSize(zeroDim);      button.setMinimumSize(zeroDim);      button.setMaximumSize(zeroDim);      return button;    }    @Override    protected JButton createDecreaseButton(int orientation) {      return createZeroButton();    }    @Override    protected JButton createIncreaseButton(int orientation) {      return createZeroButton();    }  }  private class OutputToInputListener implements ActionListener {    /**     * Копирует текст из поля вывода данных в поле ввода данных     * <br> В некоторых случаях это действие может являться незаменимым, например если в винде     * копировать текст вручную, то байт переноса каретки (CR - 0x13) будет вставляться как новая     * строка (LF - 0x10 или CRLF - 0x13,0x10)     *     * @param e the event to be processed     */    @Override    public void actionPerformed(ActionEvent e) {      try {        switch (UserSelections.currentAlgorithm) {          case "DSA" -> {            String signedTest = outputArea.getText();            dsaSignedPart1Field.setText(signedTest.substring(0, signedTest.length() / 2));            dsaSignedPart2Field.setText(signedTest.substring(signedTest.length() / 2));          }          case "ElGamal sign" -> {            elGamalSignResultField.setText(outputArea.getText());          }          default -> inputArea.setText(outputArea.getText());        }      } catch (Exception exception) {        exception.printStackTrace();      }    }  }  private class MenuSelectionListener implements ListSelectionListener {    /**     * Изменение названия алгоритма наверху окна и замена параметров на соответствующие ему     *     * @param e the event that characterizes the change.     */    @Override    public void valueChanged(ListSelectionEvent e) {      algNameLabel.setText(          "<html>" + fullAlgorithmNames.get(algorithmsList.getSelectedValue()) + "</html>");      UserSelections.currentAlgorithm = algorithmsList.getSelectedValue();      changePlane();    }  }  private class AutoManualKeyGenListener implements ItemListener {    /**     * Изменение параметров или доступа к редактированию в зависимости от типа их ввода (вручную -     * автоматически)     *     * @param e the event to be processed     */    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        UserSelections.keyGenAutoOrManually = button.getText().equals("Auto");        changePlane();      }    }  }  private class RSAPaddingListener implements ItemListener {    /**     * Изменение элементов параметров в RSA, связанных с типом паддинга     *     * @param e the event to be processed     */    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        UserSelections.rsaPadding = button.getText();        CardLayout cl = (CardLayout) rsaPaddingPanel.getLayout();        cl.show(rsaPaddingPanel, UserSelections.rsaPadding);      }    }  }  private class CalculateListener implements ActionListener {    /**     * Запуск вычисления в соответствии с алгоритмом в новом потоке     *     * @param e the event to be processed     */    @Override    public void actionPerformed(ActionEvent e) {      if (calculateButton.getText().equals("Calculate")) {        UserSelections.calculationThread = new CalculationBackground();        UserSelections.calculationThread.execute();        calculateButton.setText("Stop");      } else {        UserSelections.calculationThread.cancel(true);        calculateButton.setText("Calculate");      }    }  }  private class CalculationBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws InterruptedException {      try {        double startTime = System.nanoTime();        byte[] userInput = readUserInput();        if (UserSelections.fileOutput && !writeable(UserSelections.outputFilePath)) {          throw new IOException("File does not exist or unable to write in it");        }        byte[] userOutput = new byte[0];        switch (UserSelections.currentAlgorithm) {          case "RSA" -> {            RSAKeys keys;            if (UserSelections.encryptOrDecrypt) {              keys = new RSAKeys(rsaPublicKeyField.getText().strip().length() != 0 ?                  new BigInteger(rsaPublicKeyField.getText().strip()) : null, null,                  rsaModulusField.getText().strip().length() != 0 ?                      new BigInteger(rsaModulusField.getText().strip()) : null);            } else {              keys = new RSAKeys(null,                  rsaPrivateKeyField.getText().strip().length() != 0 ?                      new BigInteger(rsaPrivateKeyField.getText().strip()) : null,                  rsaModulusField.getText().strip().length() != 0 ?                      new BigInteger(rsaModulusField.getText().strip()) : null);            }            OAEP paddingParams = new OAEP();            switch (UserSelections.rsaPadding) {              case "None" -> paddingParams = new OAEP();              case "PKCS#1-OAEP" -> paddingParams = new OAEP(                  rsaPaddingSeedField.getText().getBytes(UserSelections.charsetString),                  keys.modulus.length,                  rsaPaddingLabelField.getText().getBytes(UserSelections.charsetString));            }            userOutput =                UserSelections.encryptOrDecrypt ? RSA.encrypt(userInput, keys, paddingParams)                    : RSA.decrypt(userInput, keys, paddingParams);          }          case "DH" -> {            DHKeys keys = new DHKeys(userInput.length == 0 ? new BigInteger(dhBaseField.getText())                : new BigInteger(userInput), new BigInteger(dhModulusField.getText()));            JTextField privateKeyField =                UserSelections.encryptOrDecrypt ? dhAliceField : dhBobField;            if (privateKeyField.getText().strip().length() == 0) {              throw new IllegalArgumentException("Private key have to be specified or generated");            }            keys.setPrivateKey(new BigInteger(                UserSelections.encryptOrDecrypt ? dhAliceField.getText() : dhBobField.getText()));            userOutput = DH.calculate(keys);          }          case "Shamir" -> {            ShamirKeys keys = new ShamirKeys(new BigInteger(shamirModulusField.getText()));            //true - alice keys, false - bob keys            boolean aliceOrBob = encryptRadioButton.isSelected();            keys.setPrivateKeys(new BigInteger(                    aliceOrBob ? shamirAlice1Field.getText() : shamirBob1Field.getText()),                new BigInteger(                    aliceOrBob ? shamirAlice2Field.getText() : shamirBob2Field.getText()));            if (new BigInteger(1, userInput).compareTo(new BigInteger(1, keys.publicKey)) >= 0) {              throw new IllegalArgumentException(                  "Input data in integer form must be less than modulus");            }            userOutput = Shamir.calculate(userInput, keys, shamirPartOneRadioButton.isSelected());          }          case "ElGamal" -> {            ElGamalKeys keys = new ElGamalKeys(new BigInteger(elGamalBaseField.getText()),                new BigInteger(elGamalModulusField.getText()));            boolean isEncryption = UserSelections.encryptOrDecrypt;            keys.setPersonalKeys(new BigInteger(                    isEncryption ? elGamalEncryptField.getText() : elGamalDecryptField.getText()),                isEncryption);            OAEP padding =                elGamalNonePaddingButton.isSelected() ? new OAEP() : new OAEP(keys.byteKeyLength);            userOutput = isEncryption ? ElGamal.encrypt(userInput, keys, padding)                : ElGamal.decrypt(userInput, keys, padding);          }          case "MD5" -> {            MD5 md5 = new MD5();            userOutput = Numbers.bytesToHex(md5.calculate(userInput))                .getBytes(UserSelections.charsetString);          }          case "SHA1" -> {            SHA sha = new SHA();            userOutput = Numbers.bytesToHex(sha.calculate(userInput))                .getBytes(UserSelections.charsetString);          }          case "DSA" -> {            DSAKeys keys = new DSAKeys(new BigInteger(dsaBaseField.getText()),                new BigInteger(dsaModulusField.getText()), new BigInteger(dsaOrderField.getText()));            if (UserSelections.encryptOrDecrypt) {              keys.setPrivateKey(new BigInteger(dsaPrivateKeyField.getText()));              userOutput = DSA.sign(userInput, keys);            } else {              keys.setPublicKey(new BigInteger(dsaPublicKeyField.getText()));              userOutput = DSA.verify(userInput, keys, Numbers.concatenateArrays(                  dsaSignedPart1Field.getText().getBytes(UserSelections.charsetString),                  dsaSignedPart2Field.getText().getBytes(UserSelections.charsetString)));            }          }          case "RSA sign" -> {            if (new BigInteger(rsaSignModulusField.getText()).toByteArray().length                < userInput.length) {              throw new IllegalArgumentException(                  " Key length must be bigger than input length. Current key length: "                      + new BigInteger(rsaSignModulusField.getText()).toByteArray().length                      + " bytes. Current input length: " + userInput.length + " bytes.");            }            RSAKeys keys;            if (UserSelections.encryptOrDecrypt) {              keys = new RSAKeys(new BigInteger(rsaSignPrivateKeyField.getText()), null,                  new BigInteger(rsaSignModulusField.getText()));            } else {              keys = new RSAKeys(new BigInteger(rsaSignPublicKeyField.getText()), null,                  new BigInteger(rsaSignModulusField.getText()));            }            userOutput = new BigInteger(userInput).modPow(new BigInteger(1, keys.publicKey),                new BigInteger(1, keys.modulus)).toByteArray();          }          case "ElGamal sign" -> {            ElGamalKeys keys = new ElGamalKeys(new BigInteger(elGamalSignBaseField.getText()),                new BigInteger(elGamalSignModulusField.getText()));            boolean isEncryption = UserSelections.encryptOrDecrypt;            keys.setPersonalKeys(isEncryption ? new BigInteger(elGamalSignPrivateKeyField.getText())                : new BigInteger(elGamalSignPublicKeyField.getText()), !isEncryption);            if (isEncryption) {              userOutput = ElGamalSignature.sign(userInput, keys);              elGamalSignRequiredOutputField.setText(new String(                  new BigInteger(keys.base).modPow(new BigInteger(userInput),                      new BigInteger(keys.modulus)).toByteArray(), UserSelections.charsetString));            } else {              userOutput = ElGamalSignature.verify(keys,                  elGamalSignResultField.getText().getBytes(UserSelections.charsetString));            }          }        }        if (Arrays.equals(userOutput, new byte[0])) {          return null;        }        writeCalculatedOutput(userOutput);        logsTextArea.setText("Successfully completed in: " + decimalFormat.format(            (System.nanoTime() - startTime) / 1_000_000_000) + "s");      } catch (Exception exception) {        exceptionLogger(exception);        progressBar.setValue(0);      }      return null;    }    @Override    public void done() {      if (UserSelections.calculationThread.isCancelled()) {        progressBar.setValue(0); //0% если пользователь отменил      } else if (progressBar.getValue() != 0 | progressBar.getMaximum()          == 1) { //0% уже стоит если в процессе вылетела ошибка (исключение) или же длина прогресс бара равна всего 1        progressBar.setValue(            progressBar.getMaximum()); //100% если не прерывалось и не возникало ошибок      }      calculateButton.setText("Calculate");      calculateButton.setBackground(Color.BLACK);      //calculateButton.setBackground(new Color(225, 255, 225));    }  }  //Создание пары ключей для RSA и RSA signature  private class GenerateKeyListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      GenerateKeyBackground task = new GenerateKeyBackground();      task.execute();    }  }  private class DSAGenerateSharedListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      DSAGenerateSharedBackground task = new DSAGenerateSharedBackground();      task.execute();    }  }  private class DSAGenerateSharedBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        int modulusLength, groupOrder;        if (dsa1024160Button.isSelected()) {          modulusLength = 1024;          groupOrder = 160;        } else if (dsa2048224Button.isSelected()) {          modulusLength = 2048;          groupOrder = 224;        } else if (dsa2048256Button.isSelected()) {          modulusLength = 2048;          groupOrder = 256;        } else if (dsa3072256Button.isSelected()) {          modulusLength = 3072;          groupOrder = 256;        } else {          throw new Exception("Shared parameter sizes (button) not selected");        }        DSAKeys keys = new DSAKeys(modulusLength, groupOrder);        dsaModulusField.setText(new BigInteger(keys.modulus).toString());        dsaBaseField.setText(new BigInteger(keys.base).toString());        dsaOrderField.setText(new BigInteger(keys.groupOrder).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class DSAGeneratePersonalListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      try {        DSAKeys keys = new DSAKeys(new BigInteger(dsaBaseField.getText()),            new BigInteger(dsaModulusField.getText()), new BigInteger(dsaOrderField.getText()));        keys.setPersonalKeys();        dsaPrivateKeyField.setText(new BigInteger(1, keys.personalPrivateKey).toString());        dsaPublicKeyField.setText(new BigInteger(1, keys.personalPublicKey).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }    }  }  private class ElGamalGenerateSharedListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      ElGamalGenerateSharedBackground task = new ElGamalGenerateSharedBackground();      task.execute();    }  }  private class ElGamalGenerateSharedBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        int keyLength;        try {          switch (UserSelections.currentAlgorithm) {            case "ElGamal" -> {              keyLength = Integer.parseInt(elGamalSharedLengthField.getText());              ElGamalKeys keys = new ElGamalKeys(keyLength);              elGamalBaseField.setText(new BigInteger(keys.base).toString());              elGamalModulusField.setText(new BigInteger(keys.modulus).toString());            }            case "ElGamal sign" -> {              keyLength = Integer.parseInt(elGamalSignKeyLengthField.getText());              ElGamalKeys keys = new ElGamalKeys(keyLength);              elGamalSignBaseField.setText(new BigInteger(keys.base).toString());              elGamalSignModulusField.setText(new BigInteger(keys.modulus).toString());            }          }        } catch (NumberFormatException exception) {          throw new IllegalArgumentException(" Incorrect key size field format");        }      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class ElGamalGeneratePersonalListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      try {        switch (UserSelections.currentAlgorithm) {          case "ElGamal" -> {            ElGamalKeys keys = new ElGamalKeys(new BigInteger(elGamalBaseField.getText()),                new BigInteger(elGamalModulusField.getText()));            keys.setPersonalKeys();            elGamalEncryptField.setText(new BigInteger(keys.personalPublicKey).toString());            elGamalDecryptField.setText(new BigInteger(keys.personalPrivateKey).toString());          }          case "ElGamal sign" -> {            ElGamalKeys keys = new ElGamalKeys(new BigInteger(elGamalSignBaseField.getText()),                new BigInteger(elGamalSignModulusField.getText()));            keys.setPersonalKeys();            elGamalSignPrivateKeyField.setText(new BigInteger(keys.personalPrivateKey).toString());            elGamalSignPublicKeyField.setText(new BigInteger(keys.personalPublicKey).toString());          }        }      } catch (Exception exception) {        exceptionLogger(exception);      }    }  }  private class ShamirGeneratePublicListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      ShamirGeneratePublicBackground task = new ShamirGeneratePublicBackground();      task.execute();    }  }  private class ShamirGeneratePublicBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        int keyLength = 0;        try {          keyLength = Integer.parseInt(shamirModulusLengthField.getText());        } catch (NumberFormatException exception) {          throw new IllegalArgumentException(" Incorrect key size field format");        }        ShamirKeys keys = new ShamirKeys(keyLength);        shamirModulusField.setText(new BigInteger(keys.publicKey).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class ShamirGeneratePrivateListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      ShamirGeneratePrivateBackground task = new ShamirGeneratePrivateBackground();      task.execute();    }  }  private class ShamirGeneratePrivateBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        ShamirKeys keys = new ShamirKeys(new BigInteger(shamirModulusField.getText()));        keys.setPrivateKeys();        if (UserSelections.encryptOrDecrypt) {          shamirAlice1Field.setText(new BigInteger(keys.firstPrivateKey).toString());          shamirAlice2Field.setText(new BigInteger(keys.secondPrivateKey).toString());        } else {          shamirBob1Field.setText(new BigInteger(keys.firstPrivateKey).toString());          shamirBob2Field.setText(new BigInteger(keys.secondPrivateKey).toString());        }      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class DHGenerateSharedListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      DHGenerateSharedBackground task = new DHGenerateSharedBackground();      task.execute();    }  }  private class DHGenerateSharedBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        int keyLength = 0;        try {          keyLength = Integer.parseInt(dhSharedLength.getText());        } catch (NumberFormatException exception) {          throw new IllegalArgumentException(" Incorrect key size field format");        }        DHKeys keys = new DHKeys(keyLength);        dhBaseField.setText(new BigInteger(keys.base).toString());        dhModulusField.setText(new BigInteger(keys.modulus).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class DHGenerateAliceBobListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      try {        DHKeys keys = new DHKeys(new BigInteger(dhBaseField.getText()),            new BigInteger(dhModulusField.getText()));        keys.setPrivateKey();        if (e.getActionCommand().equals("Generate Bob key")) {          dhBobField.setText(new BigInteger(keys.privateKey).toString());        } else {          dhAliceField.setText(new BigInteger(keys.privateKey).toString());        }      } catch (Exception exception) {        exceptionLogger(exception);      }    }  }  private class GenerateKeyBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        generateKeyButton.setEnabled(false);        int rsaKeyLength;        switch (UserSelections.currentAlgorithm) {          case "RSA" -> {            try {              rsaKeyLength = Integer.parseInt(rsaKeyLengthField.getText());            } catch (NumberFormatException exception) {              logsTextArea.setText(                  "Incorrect key length field input format: " + rsaKeyLengthField.getText());              return null;            }            RSAKeys keys = new RSAKeys(rsaKeyLength, true);            rsaPublicKeyField.setText(new BigInteger(1, keys.publicKey).toString());            rsaPrivateKeyField.setText(new BigInteger(1, keys.privateKey).toString());            rsaModulusField.setText(new BigInteger(1, keys.modulus).toString());          }          case "RSA sign" -> {            try {              rsaKeyLength = Integer.parseInt(rsaSignKeyLengthField.getText());            } catch (NumberFormatException exception) {              logsTextArea.setText(                  "Incorrect key length field input format: " + rsaSignKeyLengthField.getText());              return null;            }            RSAKeys keys = new RSAKeys(rsaKeyLength, rsaSignDefaultPublicRadioButton.isSelected());            rsaSignPublicKeyField.setText(new BigInteger(1, keys.publicKey).toString());            rsaSignPrivateKeyField.setText(new BigInteger(1, keys.privateKey).toString());            rsaSignModulusField.setText(new BigInteger(1, keys.modulus).toString());          }        }      } catch (Exception exception) {        exceptionLogger(exception);      } finally {        generateKeyButton.setEnabled(true);      }      return null;    }  }  private class EncryptDecryptListener implements ItemListener {    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        UserSelections.encryptOrDecrypt = encryptRadioButton.isSelected();        changePlane();      }    }  }  private class ChoseFileListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      int choice;      JTextField pathField;      JLabel sizeLabel;      JFileChooser fileChooser;      String fileAbility;      if (e.getActionCommand().equals("InputFile")) {        fileChooser = inputFileChooser;        pathField = currentFilePathField;        sizeLabel = fileSizeTipLabel;        fileAbility = "readable";      } else {        fileChooser = outputFileChooser;        pathField = outputCurrentFilePathField;        sizeLabel = outputFileSizeTipLabel;        fileAbility = "writeable";      }      choice = fileChooser.showOpenDialog(mainPanel);      if (choice == JFileChooser.APPROVE_OPTION) {        String filePath = fileChooser.getSelectedFile().toString();        Path path = Path.of(filePath);        if (Files.isReadable(path)) {          pathField.setText(filePath);          pathField.setToolTipText(pathField.getText());          if (e.getActionCommand().equals("InputFile")) {            UserSelections.inputFilePath = filePath;          } else {            UserSelections.outputFilePath = filePath;          }          try {            sizeLabel.setText("Size (in bytes): " + Files.size(path));          } catch (IOException exception) {            sizeLabel.setText("Size (in bytes): " + -1);          }        } else {          exceptionLogger(              new Exception("File does not exist or un" + fileAbility + ": " + filePath));        }      }    }  }  private class InputTypeListener implements ItemListener {    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        CardLayout cl = (CardLayout) changeInputTypePanel.getLayout();        cl.next(changeInputTypePanel);        String currentAlg = UserSelections.currentAlgorithm;        cl = (CardLayout) changeOutputTypePanel.getLayout();        if (currentAlg.equals("SHA1") | currentAlg.equals("MD5")) {          cl.show(changeOutputTypePanel, "PlainText");          UserSelections.fileOutput = false;        } else {          cl.next(changeOutputTypePanel);          UserSelections.fileOutput = button.getText().equals("File");        }        UserSelections.fileInput = button.getText().equals("File");        outputToInputButton.setVisible(!UserSelections.fileOutput);      }    }  }  private class HyperLinkListener implements MouseListener {    @Override    public void mouseClicked(MouseEvent e) {      try {        Desktop.getDesktop().browse(new URI("https://github.com/syndersage/AsymCrypt"));      } catch (URISyntaxException | IOException ignored) {      }    }    @Override    public void mousePressed(MouseEvent e) {    }    @Override    public void mouseReleased(MouseEvent e) {    }    @Override    public void mouseEntered(MouseEvent e) {      githubLabel.setText("<html><a href=''>GitHub</a></html>");    }    @Override    public void mouseExited(MouseEvent e) {      githubLabel.setText("GitHub");    }  }}