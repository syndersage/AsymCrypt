package cryptography.asymmetric.gui;import cryptography.asymmetric.dh.DH;import cryptography.asymmetric.dh.DHKeys;import cryptography.asymmetric.elgamal.ElGamal;import cryptography.asymmetric.elgamal.ElGamalKeys;import cryptography.asymmetric.rsa.OAEP;import cryptography.asymmetric.rsa.RSA;import cryptography.asymmetric.rsa.RSAKeys;import cryptography.asymmetric.shamir.Shamir;import cryptography.asymmetric.shamir.ShamirKeys;import java.awt.CardLayout;import java.awt.Color;import java.awt.Container;import java.awt.Cursor;import java.awt.Desktop;import java.awt.Dimension;import java.awt.Font;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.IOException;import java.math.BigInteger;import java.net.URI;import java.net.URISyntaxException;import java.nio.file.Files;import java.nio.file.Path;import java.util.Arrays;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JProgressBar;import javax.swing.JRadioButton;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.SwingUtilities;import javax.swing.SwingWorker;import javax.swing.UIManager;import javax.swing.WindowConstants;import javax.swing.border.Border;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.plaf.basic.BasicScrollBarUI;import static java.util.Map.entry;public class MainForm extends JFrame {  private JPanel mainPanel;  private JLabel progNameLabel;  private JLabel authorLabel;  private JList<String> algorithmsList;  private JScrollPane scrollPanel;  private JPanel dataPanel;  private JPanel menuPanel;  private JPanel algNamePanel;  private JLabel algNameLabel;  private JPanel logsPanel;  private JPanel algorithmsPanel;  private JTextArea logsTextArea;  private JPanel inputTypePanel;  private JRadioButton plainTextRadioButton;  private JRadioButton fileRadioButton;  private JPanel outputResultPanel;  private JTextArea outputArea;  private JScrollPane scrollOutputPanel;  private JLabel outputTipLabel;  private JPanel inputDataAndParamsPanel;  private JPanel inputDataPanel;  private JTextArea inputArea;  private JButton calculateButton;  private JLabel inputTipLabel;  private JScrollPane scrollInputPanel;  private JPanel calculateButtonPanel;  private JRadioButton encryptRadioButton;  private JRadioButton decryptRadioButton;  private JPanel paramsPanel;  private JPanel encryptDecryptPanel;  private JLabel paramsTipLabel;  private JPanel changeInputTypePanel;  private JPanel inputFilePanel;  private JButton chooseInputFileButton;  private JLabel currentFileTipLabel;  private JLabel currentFilePathLabel;  private JLabel fileSizeTipLabel;  private JPanel changeOutputTypePanel;  private JPanel outputFilePanel;  private JButton chooseOutputFileButton;  private JLabel outputFileSizeTipLabel;  private JLabel outputCUrrentFilePathLabel;  private JTextField currentFilePathField;  private JTextField outputCurrentFilePathField;  private JPanel authorPanel;  private JLabel githubLink;  private JPanel linksPanel;  private JLabel githubLabel;  private JPanel paramsAlgorithmsPanel;  private JRadioButton rsaPKCS1OAEPPaddingButton;  private JRadioButton rsaNonePaddingButton;  private JRadioButton autoKeyGenButton;  private JRadioButton manualKeyGenButton;  private JTextField rsaModulusField;  private JLabel rsaPublicPrivateKey;  private JTextField rsaPublicKeyField;  private JPanel rsaEncryptDecryptPanel;  private JTextField rsaPrivateKeyField;  private JTextField rsaKeyLengthField;  private JButton generateKeyButton;  private JPanel rsaPaddingPanel;  private JTextField rsaPaddingSeedField;  private JTextField rsaPaddingLabelField;  private JPanel rsaPaddingOAEPPanel;  private JButton outputToInputButton;  private JPanel progressPanel;  private JProgressBar progressBar;  private JLabel progressLabel;  private JPanel outputToInputPanel;  private JPanel dhEncryptDecryptPanel;  private JPanel rsaPanel;  private JLabel rsaModulusLabel;  private JLabel rsaKeyLengthLabel;  private JLabel rsaPaddingLabelLabel;  private JLabel rsaPaddingSeedLabel;  private JPanel dhPanel;  private JTextField dhModulusField;  private JTextField dhBaseField;  private JPanel dhEncryptPanel;  private JLabel dhAliceKeyLabel;  private JTextField dhAliceField;  private JPanel dhDecryptPanel;  private JLabel dhBobKeyLabel;  private JTextField dhBobField;  private JPanel paramsInputTypePanel;  private JTextField dhSharedLength;  private JButton dhAliceButton;  private JButton dhBobButton;  private JButton dhGenerateSharedButton;  private JPanel shamirPanel;  private JTextField shamirModulusField;  private JTextField shamirModulusLengthField;  private JButton shamirGeneratePrivateKeysButton;  private JTextField shamirAlice1Field;  private JTextField shamirAlice2Field;  private JLabel shamirKeyLengthLabel;  private JPanel shamirEncryptDecryptPanel;  private JPanel shamirEncryptPanel;  private JPanel shamirDecryptPanel;  private JTextField shamirBob1Field;  private JTextField shamirBob2Field;  private JRadioButton shamirPartOneRadioButton;  private JRadioButton shamirPartTwoRadioButton;  private JLabel shamirAliceBob1Label;  private JLabel shamirAliceBob2Label;  private JButton shamirGeneratePublicButton;  private JPanel elGamalPanel;  private JButton elGamalGeneratePublicButton;  private JButton elGamalGeneratePersonalButton;  private JTextField elGamalSharedLengthField;  private JTextField elGamalModulusField;  private JTextField elGamalBaseField;  private JLabel elGamalModulusLabel;  private JPanel elGamalEncryptDecryptPanel;  private JTextField elGamalEncryptField;  private JTextField elGamalDecryptField;  private JLabel elGamalPublicKeyLabel;  private JRadioButton elGamalNonePaddingButton;  private JRadioButton elGamalPKCSPaddingButton;  private JLabel elGanalPaddingLabel;  private JTextArea currentInputFileArea;  private JLabel fileSizeLabel;  private JLabel currentFileLabel;  private final JFileChooser inputFileChooser = new JFileChooser();  private final JFileChooser outputFileChooser = new JFileChooser();  private final Map<String, String> fullAlgorithmNames = Map.ofEntries(      entry("RSA", "Rivest-Shamir-Adleman encryption"),      entry("DH", "Diffie-Hellman key exchange"),      entry("Shamir", "Shamir No-key encryption"),      entry("ElGamal", "ElGamal encryption scheme")  );  private final Map<String, JPanel> algorithmEncryptDecryptPanels = Map.ofEntries(      entry("RSA", rsaEncryptDecryptPanel),      entry("DH", dhEncryptDecryptPanel),      entry("Shamir", shamirEncryptDecryptPanel),      entry("ElGamal", elGamalEncryptDecryptPanel)  );  //Перефразирование обычных, часто встречающихся исключений в что-то более понятное для пользоватлея  private final Map<String, String> defaultExceptionsRephrase = Map.ofEntries(      entry("Zero length BigInteger", "Not all required for current operation parameters are set")  );  public MainForm() {    super();    setSize(new Dimension(800, 500));    setVisible(true);    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);    setContentPane(mainPanel);    scrollPanel.setPreferredSize(new Dimension(100, this.getHeight()));    progNameLabel.setPreferredSize(new Dimension(scrollPanel.getWidth(), 40));    authorPanel.setPreferredSize(new Dimension(scrollPanel.getWidth(), 40));    algNamePanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 40));    logsPanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 55));    inputTypePanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 40));    outputResultPanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 70));    inputDataPanel.setPreferredSize(new Dimension(dataPanel.getWidth(), 100));    calculateButtonPanel.setPreferredSize(new Dimension(200, inputDataPanel.getHeight()));    progressPanel.setPreferredSize(new Dimension(200, inputDataPanel.getHeight()));    Dimension scrollDim = new Dimension(10, 0);    NoArrowScrollBarUI scrollArrow = new NoArrowScrollBarUI();    algorithmsList.setSelectedIndex(0);    scrollOutputPanel.getVerticalScrollBar().setPreferredSize(scrollDim);    scrollInputPanel.getVerticalScrollBar().setPreferredSize(scrollDim);    scrollPanel.getVerticalScrollBar().setPreferredSize(scrollDim);    githubLabel.setForeground(Color.BLUE.darker());    githubLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));    githubLabel.addMouseListener(new HyperLinkListener());    //scrollOutputPanel.getVerticalScrollBar().setUI(scrollArrow);    //scrollInputPanel.getVerticalScrollBar().setUI(scrollArrow);    //scrollPanel.getVerticalScrollBar().setUI(scrollArrow);    logsTextArea.setBackground(dataPanel.getBackground());    algorithmsList.setBackground(dataPanel.getBackground());    currentFilePathField.setBackground(dataPanel.getBackground());    outputCurrentFilePathField.setBackground(dataPanel.getBackground());    logsTextArea.setWrapStyleWord(true);    outputArea.setWrapStyleWord(true);    inputArea.setWrapStyleWord(true);    logsTextArea.setLineWrap(true);    outputArea.setLineWrap(true);    inputArea.setLineWrap(true);    logsTextArea.setMargin(new Insets(0, 10, 0, 10));    outputArea.setMargin(new Insets(5, 5, 5, 5));    inputArea.setMargin(new Insets(5, 5, 5, 5));    calculateButton.setMargin(new Insets(25, 25, 25, 25));    logsTextArea.getCaret().setBlinkRate(0);    InputTypeListener inputTypeListener = new InputTypeListener();    fileRadioButton.addItemListener(inputTypeListener);    plainTextRadioButton.addItemListener(inputTypeListener);    Border emptyBorder = BorderFactory.createEmptyBorder();    plainTextRadioButton.setBorder(emptyBorder);    fileRadioButton.setBorder(emptyBorder);    ChoseFileListener cfl = new ChoseFileListener();    chooseInputFileButton.addActionListener(cfl);    chooseOutputFileButton.addActionListener(cfl);    outputToInputButton.setText("<html><center>Move output<br>to input</center></html>");    outputToInputButton.setPreferredSize(new Dimension(75, outputResultPanel.getHeight()));    outputToInputButton.setMargin(new Insets(0, 0, 0, 0));    logsTextArea.setText("1.Choose input/output format -> enter data according to chosen format\n2.Choose encrypt or decrypt -> set parameters\n3.Press «Calculate» button");    scrollPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 2, 0, Color.BLACK));    menuPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 2, Color.BLACK));    algorithmsPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    encryptDecryptPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    outputTipLabel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    logsTextArea.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK));    paramsInputTypePanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 10));    outputResultPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    outputToInputPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 10));    outputResultPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));    paramsPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    paramsAlgorithmsPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));    progressPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 15));    logsPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));    inputFilePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    rsaPaddingOAEPPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 15));    currentFilePathField.setBorder(BorderFactory.createEmptyBorder());    outputCurrentFilePathField.setBorder(BorderFactory.createEmptyBorder());    outputFilePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));    inputDataPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));    calculateButtonPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));    algNameLabel.setText(fullAlgorithmNames.get(algorithmsList.getSelectedValue()));    algorithmsList.addListSelectionListener(new MenuSelectionListener());    autoKeyGenButton.setSelected(true);    UserSelections.currentAlgorithm = algorithmsList.getSelectedValue();    UserSelections.keyGenAutoOrManually = autoKeyGenButton.isSelected();    UserSelections.progress = progressBar;    Dimension rsaKeyLabel = new Dimension(50, 10);    //RSA    rsaNonePaddingButton.setSelected(true);    rsaPublicPrivateKey.setMinimumSize(rsaKeyLabel);    rsaPublicPrivateKey.setMaximumSize(rsaKeyLabel);    rsaPublicPrivateKey.setPreferredSize(rsaKeyLabel);    rsaPublicKeyField.setEditable(!UserSelections.keyGenAutoOrManually);    rsaPrivateKeyField.setEditable(!UserSelections.keyGenAutoOrManually);    rsaModulusField.setEditable(!UserSelections.keyGenAutoOrManually);    rsaKeyLengthField.setEditable(UserSelections.keyGenAutoOrManually);    generateKeyButton.setEnabled(UserSelections.keyGenAutoOrManually);    RSAPaddingListener rsaPaddingListener = new RSAPaddingListener();    rsaNonePaddingButton.addItemListener(rsaPaddingListener);    rsaPKCS1OAEPPaddingButton.addItemListener(rsaPaddingListener);    //DH    DHGenerateAliceBobListener aliceBobListener = new DHGenerateAliceBobListener();    dhBobButton.addActionListener(aliceBobListener);    dhAliceButton.addActionListener(aliceBobListener);    dhGenerateSharedButton.addActionListener(new DHGenerateSharedListener());    //Shamir    shamirPartOneRadioButton.setSelected(true);    shamirGeneratePublicButton.addActionListener(new ShamirGeneratePublicListener());    shamirGeneratePrivateKeysButton.addActionListener(new ShamirGeneratePrivateListener());    //ElGamal    elGamalNonePaddingButton.setSelected(true);    elGamalGeneratePublicButton.addActionListener(new ElGamalGenerateSharedListener());    elGamalGeneratePersonalButton.addActionListener(new ElGamalGeneratePersonalListener());    EncryptDecryptListener encryptDecryptListener = new EncryptDecryptListener();    encryptRadioButton.addItemListener(encryptDecryptListener);    decryptRadioButton.addItemListener(encryptDecryptListener);    AutoManualKeyGenListener autoManualKeyGenListener = new AutoManualKeyGenListener();    autoKeyGenButton.addItemListener(autoManualKeyGenListener);    manualKeyGenButton.addItemListener(autoManualKeyGenListener);    GenerateKeyListener generateKeyListener = new GenerateKeyListener();    generateKeyButton.addActionListener(generateKeyListener);    calculateButton.addActionListener(new CalculateListener());    outputToInputButton.addActionListener(new OutputToInputListener());  }  private class OutputToInputListener implements ActionListener {    /**     * Копирует текст из поля вывода данных в поле ввода данных     * <br> В некоторых случаях это действие может являться незаменимым, например если в винде копировать текст вручную, то байт переноса каретки (CR - 0x13) будет вставляться как новая строка (LF - 0x10 или CRLF - 0x13,0x10)     * @param e the event to be processed     */    @Override    public void actionPerformed(ActionEvent e) {      try {        inputArea.setText(outputArea.getText());      } catch (Exception exception) {        exception.printStackTrace();      }    }  }  private class MenuSelectionListener implements ListSelectionListener {    /**     * Изменение названия алгоритма наверху окна и замена параметров на соответствующие ему     * @param e the event that characterizes the change.     */    @Override    public void valueChanged(ListSelectionEvent e) {      algNameLabel.setText("<html>" + fullAlgorithmNames.get(algorithmsList.getSelectedValue()) + "</html>");      UserSelections.currentAlgorithm = algorithmsList.getSelectedValue();      changePlane();    }  }  private class AutoManualKeyGenListener implements ItemListener {    /**     * Изменение параметров или доступа к редактированию в зависимости от типа их ввода (вручную - автоматически)     * @param e the event to be processed     */    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        UserSelections.keyGenAutoOrManually = button.getText().equals("Auto");        changePlane();      }    }  }  private class RSAPaddingListener implements ItemListener {    /**     * Изменение элементов параметров в RSA, связанных с типом паддинга     * @param e the event to be processed     */    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        UserSelections.rsaPadding = button.getText();        CardLayout cl = (CardLayout) rsaPaddingPanel.getLayout();        cl.show(rsaPaddingPanel, UserSelections.rsaPadding);      }    }  }  private class CalculateListener implements ActionListener {    /**     * Запуск вычисления в соответствии с алгоритмом в новом потоке     * @param e the event to be processed     */    @Override    public void actionPerformed(ActionEvent e) {      if (calculateButton.getText().equals("Calculate")) {        UserSelections.calculationThread = new CalculationBackground();        UserSelections.calculationThread.execute();        calculateButton.setText("Stop");      } else {        UserSelections.calculationThread.cancel(true);        calculateButton.setText("Calculate");      }    }  }  /**   * Чтение введенных пользователем данных в зависимости от типа ввода (текст - файл)   * @return массив {@code byte[]} прочитанных данных пользователя   * @throws IOException Проблемы при чтении из файла   * @throws NullPointerException Прочие проблемы с доступом к объектам   */  private byte[] readUserInput() throws IOException, NullPointerException {    return UserSelections.fileInput ? Files.readAllBytes(Path.of(UserSelections.inputFilePath)) : inputArea.getText().getBytes(UserSelections.charsetString);  }  /**   * Проверка на то, является ли файл доступным на чтение или нет   * @param strPath абсолютный путь файла   * @return true - файл можно редактировать, false - файл нельзя редактировать, файл не существует или иные ограничения доступа   */  private boolean writeable(String strPath) {    try {      Path path = Path.of(strPath);      if (Files.isWritable(path)) {        return true;      }    } catch (Exception exception) {      return false;    }    return false;  }  /**   * Запись   * @param data   * @throws IOException   * @throws NullPointerException   */  private void writeCalculatedOutput(byte[] data) throws IOException, NullPointerException {    if (UserSelections.fileInput) {      Files.write(Path.of(UserSelections.outputFilePath), data);      outputFileSizeTipLabel.setText("Size (in bytes): " + Files.size(Path.of(UserSelections.outputFilePath)));    } else {      outputArea.setText(new String(data, UserSelections.charsetString));    }  }  private class CalculationBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws InterruptedException {      try {        byte[] userInput = readUserInput();        if (UserSelections.fileInput && !writeable(UserSelections.outputFilePath)) {          throw new IOException("File does not exist or unable to write in it");        }        byte[] userOutput = new byte[0];        switch (UserSelections.currentAlgorithm) {          case "RSA" -> {            RSAKeys keys;            if (UserSelections.encryptOrDecrypt) {              keys = new RSAKeys(rsaPublicKeyField.getText().strip().length() != 0 ?                  new BigInteger(rsaPublicKeyField.getText().strip()) : null, null,                  rsaModulusField.getText().strip().length() != 0 ?                      new BigInteger(rsaModulusField.getText().strip()) : null);            } else {              keys = new RSAKeys(null,                  rsaPrivateKeyField.getText().strip().length() != 0 ?                      new BigInteger(rsaPrivateKeyField.getText().strip()) : null,                  rsaModulusField.getText().strip().length() != 0 ?                      new BigInteger(rsaModulusField.getText().strip()) : null);            }            OAEP paddingParams = new OAEP();            switch (UserSelections.rsaPadding) {              case "None" -> paddingParams = new OAEP();              case "PKCS#1-OAEP" -> paddingParams = new OAEP(rsaPaddingSeedField.getText().getBytes(UserSelections.charsetString), keys.modulus.length, rsaPaddingLabelField.getText().getBytes(UserSelections.charsetString));            }            userOutput = UserSelections.encryptOrDecrypt ? RSA.encrypt(userInput, keys, paddingParams) : RSA.decrypt(userInput, keys, paddingParams);          }          case "DH" -> {            DHKeys keys = new DHKeys(userInput.length == 0 ? new BigInteger(dhBaseField.getText()) : new BigInteger(userInput), new BigInteger(dhModulusField.getText()));            JTextField privateKeyField = UserSelections.encryptOrDecrypt ? dhAliceField : dhBobField;            if (privateKeyField.getText().strip().length() == 0) {              throw new IllegalArgumentException("Private key have to be specified or generated");            }            keys.setPrivateKey(new BigInteger(UserSelections.encryptOrDecrypt ? dhAliceField.getText() : dhBobField.getText()));            userOutput = DH.calculate(keys);          }          case "Shamir" -> {            ShamirKeys keys = new ShamirKeys(new BigInteger(shamirModulusField.getText()));            //true - alice keys, false - bob keys            boolean aliceOrBob = encryptRadioButton.isSelected();            keys.setPrivateKeys(new BigInteger(aliceOrBob ? shamirAlice1Field.getText() : shamirBob1Field.getText()), new BigInteger(aliceOrBob ? shamirAlice2Field.getText() : shamirBob2Field.getText()));            if (new BigInteger(1, userInput).compareTo(new BigInteger(1, keys.publicKey)) >= 0) {              throw new IllegalArgumentException("Input data in integer form must be less than modulus");            }            userOutput = Shamir.calculate(userInput, keys, shamirPartOneRadioButton.isSelected());          }          case "ElGamal" -> {            ElGamalKeys keys = new ElGamalKeys(new BigInteger(elGamalBaseField.getText()),                new BigInteger(elGamalModulusField.getText()));            boolean isEncryption = UserSelections.encryptOrDecrypt;            keys.setPersonalKeys(new BigInteger(isEncryption ? elGamalEncryptField.getText() : elGamalDecryptField.getText()), isEncryption);            OAEP padding = elGamalNonePaddingButton.isSelected() ? new OAEP() : new OAEP(keys.byteKeyLength);            userOutput = isEncryption ? ElGamal.encrypt(userInput, keys, padding) : ElGamal.decrypt(userInput, keys, padding);          }        }        if (Arrays.equals(userOutput, new byte[0])) {          return null;        }        writeCalculatedOutput(userOutput);      } catch (Exception exception) {        exceptionLogger(exception);        progressBar.setValue(0);      }      return null;    }    @Override    public void done() {      if (UserSelections.calculationThread.isCancelled()) {        progressBar.setValue(0); //0% если пользователь отменил      } else if (progressBar.getValue() != 0 | progressBar.getMaximum() == 1) { //0% уже стоит если в процессе вылетела ошибка (исключение) или же длина прогресс бара равна всего 1        progressBar.setValue(progressBar.getMaximum()); //100% если не прерывалось и не возникало ошибок      }      calculateButton.setText("Calculate");      calculateButton.setBackground(Color.BLACK);      //calculateButton.setBackground(new Color(225, 255, 225));    }  }  //Создание пары ключей для RSA  private class GenerateKeyListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      GenerateKeyBackground task = new GenerateKeyBackground();      task.execute();    }  }  private class ElGamalGenerateSharedListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      ElGamalGenerateSharedBackground task = new ElGamalGenerateSharedBackground();      task.execute();    }  }  private class ElGamalGenerateSharedBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        int keyLength = 0;        try {          keyLength = Integer.parseInt(elGamalSharedLengthField.getText());        } catch (NumberFormatException exception) {          throw new IllegalArgumentException(" Incorrect key size field format");        }        ElGamalKeys keys = new ElGamalKeys(keyLength);        elGamalBaseField.setText(new BigInteger(keys.base).toString());        elGamalModulusField.setText(new BigInteger(keys.modulus).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class ElGamalGeneratePersonalListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      try {        ElGamalKeys keys = new ElGamalKeys(new BigInteger(elGamalBaseField.getText()), new BigInteger(elGamalModulusField.getText()));        keys.setPersonalKeys();        elGamalEncryptField.setText(new BigInteger(keys.personalPublicKey).toString());        elGamalDecryptField.setText(new BigInteger(keys.personalPrivateKey).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }    }  }  private class ShamirGeneratePublicListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      ShamirGeneratePublicBackground task = new ShamirGeneratePublicBackground();      task.execute();    }  }  private class ShamirGeneratePublicBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        int keyLength = 0;        try {          keyLength = Integer.parseInt(shamirModulusLengthField.getText());        } catch (NumberFormatException exception) {          throw new IllegalArgumentException(" Incorrect key size field format");        }        ShamirKeys keys = new ShamirKeys(keyLength);        shamirModulusField.setText(new BigInteger(keys.publicKey).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class ShamirGeneratePrivateListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      ShamirGeneratePrivateBackground task = new ShamirGeneratePrivateBackground();      task.execute();    }  }  private class ShamirGeneratePrivateBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        ShamirKeys keys = new ShamirKeys(new BigInteger(shamirModulusField.getText()));        keys.setPrivateKeys();        if (UserSelections.encryptOrDecrypt) {          shamirAlice1Field.setText(new BigInteger(keys.firstPrivateKey).toString());          shamirAlice2Field.setText(new BigInteger(keys.secondPrivateKey).toString());        } else {          shamirBob1Field.setText(new BigInteger(keys.firstPrivateKey).toString());          shamirBob2Field.setText(new BigInteger(keys.secondPrivateKey).toString());        }      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class DHGenerateSharedListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      DHGenerateSharedBackground task = new DHGenerateSharedBackground();      task.execute();    }  }  private class DHGenerateSharedBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        int keyLength = 0;        try {          keyLength = Integer.parseInt(dhSharedLength.getText());        } catch (NumberFormatException exception) {          throw new IllegalArgumentException(" Incorrect key size field format");        }        DHKeys keys = new DHKeys(keyLength);        dhBaseField.setText(new BigInteger(keys.base).toString());        dhModulusField.setText(new BigInteger(keys.modulus).toString());      } catch (Exception exception) {        exceptionLogger(exception);      }      return null;    }  }  private class DHGenerateAliceBobListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      try {        DHKeys keys = new DHKeys(new BigInteger(dhBaseField.getText()), new BigInteger(dhModulusField.getText()));        keys.setPrivateKey();        if (e.getActionCommand().equals("Generate Bob key")) {          dhBobField.setText(new BigInteger(keys.privateKey).toString());        } else {          dhAliceField.setText(new BigInteger(keys.privateKey).toString());        }      } catch (Exception exception) {        exceptionLogger(exception);      }    }  }  private class GenerateKeyBackground extends SwingWorker<Void, Void> {    @Override    protected Void doInBackground() throws Exception {      try {        generateKeyButton.setEnabled(false);        switch (UserSelections.currentAlgorithm) {          case "RSA" -> {            int rsaKeyLength;            try {              rsaKeyLength = Integer.parseInt(rsaKeyLengthField.getText());            } catch (NumberFormatException exception) {              logsTextArea.setText("Incorrect key length field input format: " + rsaKeyLengthField.getText());              return null;            }            RSAKeys keys = new RSAKeys(rsaKeyLength);            rsaPublicKeyField.setText(new BigInteger(1, keys.publicKey).toString());            rsaPrivateKeyField.setText(new BigInteger(1, keys.privateKey).toString());            rsaModulusField.setText(new BigInteger(1, keys.modulus).toString());          }        }      } catch (Exception exception) {        exceptionLogger(exception);      } finally {        generateKeyButton.setEnabled(true);      }      return null;    }  }  private class EncryptDecryptListener implements ItemListener {    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        UserSelections.encryptOrDecrypt = encryptRadioButton.isSelected();        changePlane();      }    }  }  private void changePlane() {    //Отличительные изменения, меняющие такие параметры структуры окна    specificAlgorithmChanges();    //Смена панели параметров в зависимости от выбранного алгоритма    CardLayout cardLayout = (CardLayout) paramsAlgorithmsPanel.getLayout();    cardLayout.show(paramsAlgorithmsPanel, UserSelections.currentAlgorithm);    //Смена панели параметров в зависимости от выбранного режима (зашифровать или расшифровать) и алгоритма    Container panel = algorithmEncryptDecryptPanels.get(UserSelections.currentAlgorithm);    cardLayout = (CardLayout) panel.getLayout();    cardLayout.show(panel, UserSelections.encryptOrDecrypt ? "Encrypt" : "Decrypt");    //Остальные изменения интерфейса, несвязанные с CardLayout    changeEncryptOrDecrypt();    changeAutoOrManually();  }  private void specificAlgorithmChanges() {    if (UserSelections.currentAlgorithm.equals("DH") | UserSelections.currentAlgorithm.equals("Shamir")) {      encryptRadioButton.setText("Alice");      decryptRadioButton.setText("Bob");    } else {      encryptRadioButton.setText("Encrypt");      decryptRadioButton.setText("Decrypt");    }  }  private void changeAutoOrManually() {    //true - автоматически, false - вручную    boolean ableToChange = UserSelections.keyGenAutoOrManually;    //Блокировка или разблокировка кнопок, текстовых полей и др. элементов параметров в зависимости от того, вводятся параметры вручную или автоматически    switch (UserSelections.currentAlgorithm) {      case "RSA" -> {        rsaModulusField.setEditable(!ableToChange);        rsaPublicKeyField.setEditable(!ableToChange);        rsaPrivateKeyField.setEditable(!ableToChange);        rsaKeyLengthField.setEditable(ableToChange);        generateKeyButton.setEnabled(ableToChange);      }      case "DH" -> {        dhAliceButton.setEnabled(ableToChange);        dhBobButton.setEnabled(ableToChange);        dhSharedLength.setEditable(ableToChange);        dhGenerateSharedButton.setEnabled(ableToChange);        dhModulusField.setEditable(!ableToChange);        dhBaseField.setEditable(!ableToChange);        dhBobField.setEditable(!ableToChange);        dhAliceField.setEditable(!ableToChange);      }      case "Shamir" -> {        shamirAlice1Field.setEditable(!ableToChange);        shamirAlice2Field.setEditable(!ableToChange);        shamirBob1Field.setEditable(!ableToChange);        shamirBob2Field.setEditable(!ableToChange);        shamirModulusField.setEditable(!ableToChange);        shamirModulusField.setEditable(!ableToChange);        shamirModulusLengthField.setEditable(ableToChange);        shamirGeneratePrivateKeysButton.setEnabled(ableToChange);        shamirGeneratePublicButton.setEnabled(ableToChange);      }      case "ElGamal" -> {        elGamalSharedLengthField.setEditable(ableToChange);        elGamalGeneratePersonalButton.setEnabled(ableToChange);        elGamalGeneratePublicButton.setEnabled(ableToChange);        elGamalBaseField.setEditable(!ableToChange);        elGamalModulusField.setEditable(!ableToChange);        elGamalEncryptField.setEditable(!ableToChange);        elGamalDecryptField.setEditable(!ableToChange);      }    }  }  private void changeEncryptOrDecrypt() {    switch (UserSelections.currentAlgorithm) {      case "RSA" -> {        rsaPublicPrivateKey.setText(UserSelections.encryptOrDecrypt ? "Public key" : "Private key");      }      case "Shamir" -> {        String operator = UserSelections.encryptOrDecrypt ? "Alice" : "Bob";        shamirAliceBob1Label.setText(operator + " private №1");        shamirAliceBob2Label.setText(operator + " private №2");        shamirGeneratePrivateKeysButton.setText("Generate " + operator + " keys");      }      case "ElGamal" -> {        String keyType = UserSelections.encryptOrDecrypt ? "Public" : "Private";        elGamalPublicKeyLabel.setText(keyType + " key");      }    }  }  private class ChoseFileListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent e) {      int choice;      JTextField pathField;      JLabel sizeLabel;      JFileChooser fileChooser;      String fileAbility;      if (e.getActionCommand().equals("InputFile")) {        fileChooser = inputFileChooser;        pathField = currentFilePathField;        sizeLabel = fileSizeTipLabel;        fileAbility = "readable";      } else {        fileChooser = outputFileChooser;        pathField = outputCurrentFilePathField;        sizeLabel = outputFileSizeTipLabel;        fileAbility = "writeable";      }      choice = fileChooser.showOpenDialog(mainPanel);      if (choice == JFileChooser.APPROVE_OPTION) {        String filePath = fileChooser.getSelectedFile().toString();        Path path = Path.of(filePath);        if (Files.isReadable(path)) {          pathField.setText(filePath);          pathField.setToolTipText(pathField.getText());          if (e.getActionCommand().equals("InputFile")) {            UserSelections.inputFilePath = filePath;          } else {            UserSelections.outputFilePath = filePath;          }          try {            sizeLabel.setText("Size (in bytes): " + Files.size(path));          } catch (IOException exception) {            sizeLabel.setText("Size (in bytes): " + -1);          }        } else {          exceptionLogger(new Exception("File does not exist or un" + fileAbility + ": " + filePath));        }      }    }  }  private class InputTypeListener implements ItemListener {    @Override    public void itemStateChanged(ItemEvent e) {      JRadioButton button = (JRadioButton) e.getItem();      if (button.isSelected()) {        CardLayout cl = (CardLayout) changeInputTypePanel.getLayout();        cl.next(changeInputTypePanel);        cl = (CardLayout) changeOutputTypePanel.getLayout();        cl.next(changeOutputTypePanel);        UserSelections.fileInput = button.getText().equals("File");        outputToInputButton.setVisible(!UserSelections.fileInput);      }    }  }  private void exceptionLogger(Exception exception) {    logsTextArea.setText("");    String exceptionMessage;    do {      exceptionMessage = exception.getMessage();      //Перефразирование некоторых популярных исключений, таких как "Zero length BigInteger"      if (defaultExceptionsRephrase.containsKey(exceptionMessage)) {        exceptionMessage = defaultExceptionsRephrase.get(exceptionMessage);      }      logsTextArea.append(exceptionMessage);      exception = (Exception) exception.getCause();    } while (exception != null);  }  static class NoArrowScrollBarUI extends BasicScrollBarUI {    protected JButton createZeroButton() {      JButton button = new JButton("zero button");      Dimension zeroDim = new Dimension(0, 0);      button.setPreferredSize(zeroDim);      button.setMinimumSize(zeroDim);      button.setMaximumSize(zeroDim);      return button;    }    @Override    protected JButton createDecreaseButton(int orientation) {      return createZeroButton();    }    @Override    protected JButton createIncreaseButton(int orientation) {      return createZeroButton();    }  }  private class HyperLinkListener implements MouseListener {    @Override    public void mouseClicked(MouseEvent e) {      try {        Desktop.getDesktop().browse(new URI("https://github.com/syndersage/AsymCrypt"));      } catch (URISyntaxException | IOException ignored) {      }    }    @Override    public void mousePressed(MouseEvent e) {    }    @Override    public void mouseReleased(MouseEvent e) {    }    @Override    public void mouseEntered(MouseEvent e) {      githubLabel.setText("<html><a href=''>GitHub</a></html>");    }    @Override    public void mouseExited(MouseEvent e) {      githubLabel.setText("GitHub");    }  }  public static void main(String[] args) {    try {      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());      UIManager.put("ToolTip.font", new Font("Dialog", Font.PLAIN, 10));    } catch (Exception e) {      e.printStackTrace();    }    SwingUtilities.invokeLater(MainForm::new);  }}